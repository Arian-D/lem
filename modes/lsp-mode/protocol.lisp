;;; Code generated by COMMON-LISP-USER; DO NOT EDIT.

(DEFPACKAGE :LEM-LSP-MODE/PROTOCOL)
(IN-PACKAGE :LEM-LSP-MODE/PROTOCOL)

(COMMON-LISP:DEFCLASS MESSAGE COMMON-LISP:NIL ((JSONRPC :INITARG :JSONRPC :DOCUMENTATION "" :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:DEFCLASS REQUEST-MESSAGE (MESSAGE)
                      ((ID :INITARG :ID :DOCUMENTATION "*
* The request id."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:NUMBER COMMON-LISP:STRING))
                       (METHOD :INITARG :METHOD :DOCUMENTATION "*
* The method to be invoked."
                        :TYPE COMMON-LISP:STRING)
                       (PARAMS? :INITARG :PARAMS :DOCUMENTATION "*
* The method's params."
                        :TYPE (COMMON-LISP:OR ARRAY OBJECT))))

(COMMON-LISP:DEFCLASS RESPONSE-MESSAGE (MESSAGE)
                      ((ID :INITARG :ID :DOCUMENTATION "*
* The request id."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:NUMBER COMMON-LISP:STRING NULL))
                       (RESULT? :INITARG :RESULT :DOCUMENTATION "*
* The result of a request. This member is REQUIRED on success.
* This member MUST NOT exist if there was an error invoking the method."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:STRING COMMON-LISP:NUMBER COMMON-LISP:BOOLEAN OBJECT NULL))
                       (ERROR? :INITARG :ERROR :DOCUMENTATION "*
* The error object in case a request fails."
                        :TYPE RESPONSE-ERROR)))

(COMMON-LISP:DEFCLASS RESPONSE-ERROR COMMON-LISP:NIL
                      ((CODE :INITARG :CODE :DOCUMENTATION "*
* A number indicating the error type that occurred."
                        :TYPE COMMON-LISP:NUMBER)
                       (MESSAGE :INITARG :MESSAGE :DOCUMENTATION "*
* A string providing a short description of the error."
                        :TYPE COMMON-LISP:STRING)
                       (DATA? :INITARG :DATA :DOCUMENTATION "*
* A primitive or structured value that contains additional
* information about the error. Can be omitted."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:STRING COMMON-LISP:NUMBER COMMON-LISP:BOOLEAN ARRAY OBJECT NULL))))

(COMMON-LISP:PROGN
 (COMMON-LISP:DEFPARAMETER ERROR-CODES.PARSE-ERROR -32700)
 (COMMON-LISP:DEFPARAMETER ERROR-CODES.INVALID-REQUEST -32600)
 (COMMON-LISP:DEFPARAMETER ERROR-CODES.METHOD-NOT-FOUND -32601)
 (COMMON-LISP:DEFPARAMETER ERROR-CODES.INVALID-PARAMS -32602)
 (COMMON-LISP:DEFPARAMETER ERROR-CODES.INTERNAL-ERROR -32603)
 (COMMON-LISP:DEFPARAMETER ERROR-CODES.SERVER-ERROR-START -32099)
 (COMMON-LISP:DEFPARAMETER ERROR-CODES.SERVER-ERROR-END -32000)
 (COMMON-LISP:DEFPARAMETER ERROR-CODES.SERVER-NOT-INITIALIZED -32002)
 (COMMON-LISP:DEFPARAMETER ERROR-CODES.UNKNOWN-ERROR-CODE -32001)
 (COMMON-LISP:DEFPARAMETER ERROR-CODES.REQUEST-CANCELLED -32800)
 (COMMON-LISP:DEFPARAMETER ERROR-CODES.CONTENT-MODIFIED -32801))

(COMMON-LISP:DEFCLASS NOTIFICATION-MESSAGE (MESSAGE)
                      ((METHOD :INITARG :METHOD :DOCUMENTATION "*
* The method to be invoked."
                        :TYPE COMMON-LISP:STRING)
                       (PARAMS? :INITARG :PARAMS :DOCUMENTATION "*
* The notification's params."
                        :TYPE (COMMON-LISP:OR ARRAY OBJECT))))

(COMMON-LISP:DEFCLASS CANCEL-PARAMS COMMON-LISP:NIL
                      ((ID :INITARG :ID :DOCUMENTATION "*
* The request id to cancel."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:NUMBER COMMON-LISP:STRING))))

COMMON-LISP:NIL

(COMMON-LISP:DEFCLASS PROGRESS-PARAMS COMMON-LISP:NIL
                      ((TOKEN :INITARG :TOKEN :DOCUMENTATION "*
* The progress token provided by the client or server."
                        :TYPE PROGRESS-TOKEN)
                       (VALUE :INITARG :VALUE :DOCUMENTATION "*
* The progress data."
                        :TYPE T)))

COMMON-LISP:NIL

(COMMON-LISP:DEFCLASS POSITION COMMON-LISP:NIL
                      ((LINE :INITARG :LINE :DOCUMENTATION "*
* Line position in a document (zero-based)."
                        :TYPE COMMON-LISP:NUMBER)
                       (CHARACTER :INITARG :CHARACTER :DOCUMENTATION "*
* Character offset on a line in a document (zero-based). Assuming that the line is
* represented as a string, the `character` value represents the gap between the
* `character` and `character + 1`.
*
* If the character value is greater than the line length it defaults back to the
* line length."
                        :TYPE COMMON-LISP:NUMBER)))

(COMMON-LISP:DEFCLASS RANGE COMMON-LISP:NIL
                      ((START :INITARG :START :DOCUMENTATION "*
* The range's start position."
                        :TYPE POSITION)
                       (END :INITARG :END :DOCUMENTATION "*
* The range's end position."
                        :TYPE POSITION)))

(COMMON-LISP:DEFCLASS LOCATION COMMON-LISP:NIL ((URI :INITARG :URI :DOCUMENTATION "" :TYPE DOCUMENT-URI) (RANGE :INITARG :RANGE :DOCUMENTATION "" :TYPE RANGE)))

(COMMON-LISP:DEFCLASS LOCATION-LINK COMMON-LISP:NIL
                      ((ORIGIN-SELECTION-RANGE? :INITARG :ORIGIN-SELECTION-RANGE :DOCUMENTATION "*
* Span of the origin of this link.
*
* Used as the underlined span for mouse interaction. Defaults to the word range at
* the mouse position."
                        :TYPE RANGE)
                       (TARGET-URI :INITARG :TARGET-URI :DOCUMENTATION "*
* The target resource identifier of this link."
                        :TYPE DOCUMENT-URI)
                       (TARGET-RANGE :INITARG :TARGET-RANGE :DOCUMENTATION "*
* The full target range of this link. If the target for example is a symbol then target range is the
* range enclosing this symbol not including leading/trailing whitespace but everything else
* like comments. This information is typically used to highlight the range in the editor."
                        :TYPE RANGE)
                       (TARGET-SELECTION-RANGE :INITARG :TARGET-SELECTION-RANGE :DOCUMENTATION "*
* The range that should be selected and revealed when this link is being followed, e.g the name of a function.
* Must be contained by the the `targetRange`. See also `DocumentSymbol#range`"
                        :TYPE RANGE)))

(COMMON-LISP:DEFCLASS DIAGNOSTIC COMMON-LISP:NIL
                      ((RANGE :INITARG :RANGE :DOCUMENTATION "*
* The range at which the message applies."
                        :TYPE RANGE)
                       (SEVERITY? :INITARG :SEVERITY :DOCUMENTATION "*
* The diagnostic's severity. Can be omitted. If omitted it is up to the
* client to interpret diagnostics as error, warning, info or hint."
                        :TYPE DIAGNOSTIC-SEVERITY)
                       (CODE? :INITARG :CODE :DOCUMENTATION "*
* The diagnostic's code, which might appear in the user interface."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:NUMBER COMMON-LISP:STRING))
                       (SOURCE? :INITARG :SOURCE :DOCUMENTATION "*
* A human-readable string describing the source of this
* diagnostic, e.g. 'typescript' or 'super lint'."
                        :TYPE COMMON-LISP:STRING)
                       (MESSAGE :INITARG :MESSAGE :DOCUMENTATION "*
* The diagnostic's message."
                        :TYPE COMMON-LISP:STRING)
                       (TAGS? :INITARG :TAGS :DOCUMENTATION "*
* Additional metadata about the diagnostic.
*
* @since 3.15.0"
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY DIAGNOSTIC-TAG))
                       (RELATED-INFORMATION? :INITARG :RELATED-INFORMATION :DOCUMENTATION "*
* An array of related diagnostic information, e.g. when symbol-names within
* a scope collide all definitions can be marked via this property."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY DIAGNOSTIC-RELATED-INFORMATION))))

(COMMON-LISP:PROGN
 (COMMON-LISP:DEFPARAMETER DIAGNOSTIC-SEVERITY.ERROR 1)
 (COMMON-LISP:DEFPARAMETER DIAGNOSTIC-SEVERITY.WARNING 2)
 (COMMON-LISP:DEFPARAMETER DIAGNOSTIC-SEVERITY.INFORMATION 3)
 (COMMON-LISP:DEFPARAMETER DIAGNOSTIC-SEVERITY.HINT 4))

COMMON-LISP:NIL

(COMMON-LISP:PROGN (COMMON-LISP:DEFPARAMETER DIAGNOSTIC-TAG.UNNECESSARY 1) (COMMON-LISP:DEFPARAMETER DIAGNOSTIC-TAG.DEPRECATED 2))

COMMON-LISP:NIL

(COMMON-LISP:DEFCLASS DIAGNOSTIC-RELATED-INFORMATION COMMON-LISP:NIL
                      ((LOCATION :INITARG :LOCATION :DOCUMENTATION "*
* The location of this related diagnostic information."
                        :TYPE LOCATION)
                       (MESSAGE :INITARG :MESSAGE :DOCUMENTATION "*
* The message of this related diagnostic information."
                        :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:DEFCLASS COMMAND COMMON-LISP:NIL
                      ((TITLE :INITARG :TITLE :DOCUMENTATION "*
* Title of the command, like `save`."
                        :TYPE COMMON-LISP:STRING)
                       (COMMAND :INITARG :COMMAND :DOCUMENTATION "*
* The identifier of the actual command handler."
                        :TYPE COMMON-LISP:STRING)
                       (ARGUMENTS? :INITARG :ARGUMENTS :DOCUMENTATION "*
* Arguments that the command handler should be
* invoked with."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY COMMON-LISP:T))))

(COMMON-LISP:DEFCLASS TEXT-EDIT COMMON-LISP:NIL
                      ((RANGE :INITARG :RANGE :DOCUMENTATION "*
* The range of the text document to be manipulated. To insert
* text into a document create a range where start === end."
                        :TYPE RANGE)
                       (NEW-TEXT :INITARG :NEW-TEXT :DOCUMENTATION "*
* The string to be inserted. For delete operations use an
* empty string."
                        :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:DEFCLASS TEXT-DOCUMENT-EDIT COMMON-LISP:NIL
                      ((TEXT-DOCUMENT :INITARG :TEXT-DOCUMENT :DOCUMENTATION "*
* The text document to change."
                        :TYPE VERSIONED-TEXT-DOCUMENT-IDENTIFIER)
                       (EDITS :INITARG :EDITS :DOCUMENTATION "*
* The edits to be applied."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY TEXT-EDIT))))

(COMMON-LISP:DEFCLASS CREATE-FILE-OPTIONS COMMON-LISP:NIL
                      ((OVERWRITE? :INITARG :OVERWRITE :DOCUMENTATION "*
* Overwrite existing file. Overwrite wins over `ignoreIfExists`"
                        :TYPE COMMON-LISP:BOOLEAN)
                       (IGNORE-IF-EXISTS? :INITARG :IGNORE-IF-EXISTS :DOCUMENTATION "*
* Ignore if exists."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS CREATE-FILE COMMON-LISP:NIL
                      ((KIND :INITARG :KIND :DOCUMENTATION "*
* A create"
                        :TYPE (LEM-LSP-MODE/TYPE:EQUAL-SPECIALIZER "create"))
                       (URI :INITARG :URI :DOCUMENTATION "*
* The resource to create."
                        :TYPE DOCUMENT-URI)
                       (OPTIONS? :INITARG :OPTIONS :DOCUMENTATION "*
* Additional options"
                        :TYPE CREATE-FILE-OPTIONS)))

(COMMON-LISP:DEFCLASS RENAME-FILE-OPTIONS COMMON-LISP:NIL
                      ((OVERWRITE? :INITARG :OVERWRITE :DOCUMENTATION "*
* Overwrite target if existing. Overwrite wins over `ignoreIfExists`"
                        :TYPE COMMON-LISP:BOOLEAN)
                       (IGNORE-IF-EXISTS? :INITARG :IGNORE-IF-EXISTS :DOCUMENTATION "*
* Ignores if target exists."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS RENAME-FILE COMMON-LISP:NIL
                      ((KIND :INITARG :KIND :DOCUMENTATION "*
* A rename"
                        :TYPE (LEM-LSP-MODE/TYPE:EQUAL-SPECIALIZER "rename"))
                       (OLD-URI :INITARG :OLD-URI :DOCUMENTATION "*
* The old (existing) location."
                        :TYPE DOCUMENT-URI)
                       (NEW-URI :INITARG :NEW-URI :DOCUMENTATION "*
* The new location."
                        :TYPE DOCUMENT-URI)
                       (OPTIONS? :INITARG :OPTIONS :DOCUMENTATION "*
* Rename options."
                        :TYPE RENAME-FILE-OPTIONS)))

(COMMON-LISP:DEFCLASS DELETE-FILE-OPTIONS COMMON-LISP:NIL
                      ((RECURSIVE? :INITARG :RECURSIVE :DOCUMENTATION "*
* Delete the content recursively if a folder is denoted."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (IGNORE-IF-NOT-EXISTS? :INITARG :IGNORE-IF-NOT-EXISTS :DOCUMENTATION "*
* Ignore the operation if the file doesn't exist."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS DELETE-FILE COMMON-LISP:NIL
                      ((KIND :INITARG :KIND :DOCUMENTATION "*
* A delete"
                        :TYPE (LEM-LSP-MODE/TYPE:EQUAL-SPECIALIZER "delete"))
                       (URI :INITARG :URI :DOCUMENTATION "*
* The file to delete."
                        :TYPE DOCUMENT-URI)
                       (OPTIONS? :INITARG :OPTIONS :DOCUMENTATION "*
* Delete options."
                        :TYPE DELETE-FILE-OPTIONS)))

(COMMON-LISP:DEFCLASS WORKSPACE-EDIT COMMON-LISP:NIL
                      ((CHANGES? :INITARG :CHANGES :DOCUMENTATION "*
* Holds changes to existing resources."
                        :TYPE (LEM-LSP-MODE/TYPE:INTERFACE ("uri" :TYPE (LEM-LSP-MODE/TYPE:OBJECT DOCUMENT-URI (LEM-LSP-MODE/TYPE:LSP-ARRAY TEXT-EDIT)))))
                       (DOCUMENT-CHANGES? :INITARG :DOCUMENT-CHANGES :DOCUMENTATION "*
* Depending on the client capability `workspace.workspaceEdit.resourceOperations` document changes
* are either an array of `TextDocumentEdit`s to express changes to n different text documents
* where each text document edit addresses a specific version of a text document. Or it can contain
* above `TextDocumentEdit`s mixed with create, rename and delete file / folder operations.
*
* Whether a client supports versioned document edits is expressed via
* `workspace.workspaceEdit.documentChanges` client capability.
*
* If a client neither supports `documentChanges` nor `workspace.workspaceEdit.resourceOperations` then
* only plain `TextEdit`s using the `changes` property are supported."
                        :TYPE (COMMON-LISP:OR (LEM-LSP-MODE/TYPE:LSP-ARRAY TEXT-DOCUMENT-EDIT) (LEM-LSP-MODE/TYPE:LSP-ARRAY (COMMON-LISP:OR TEXT-DOCUMENT-EDIT CREATE-FILE RENAME-FILE DELETE-FILE))))))

(COMMON-LISP:DEFCLASS WORKSPACE-EDIT-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DOCUMENT-CHANGES? :INITARG :DOCUMENT-CHANGES :DOCUMENTATION "*
* The client supports versioned document changes in `WorkspaceEdit`s"
                        :TYPE COMMON-LISP:BOOLEAN)
                       (RESOURCE-OPERATIONS? :INITARG :RESOURCE-OPERATIONS :DOCUMENTATION "*
* The resource operations the client supports. Clients should at least
* support 'create', 'rename' and 'delete' files and folders.
*
* @since 3.13.0"
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY RESOURCE-OPERATION-KIND))
                       (FAILURE-HANDLING? :INITARG :FAILURE-HANDLING :DOCUMENTATION "*
* The failure handling strategy of a client if applying the workspace edit
* fails.
*
* @since 3.13.0"
                        :TYPE FAILURE-HANDLING-KIND)))

COMMON-LISP:NIL

(COMMON-LISP:PROGN
 (COMMON-LISP:DEFPARAMETER RESOURCE-OPERATION-KIND.CREATE "create")
 (COMMON-LISP:DEFPARAMETER RESOURCE-OPERATION-KIND.RENAME "rename")
 (COMMON-LISP:DEFPARAMETER RESOURCE-OPERATION-KIND.DELETE "delete"))

COMMON-LISP:NIL

(COMMON-LISP:PROGN
 (COMMON-LISP:DEFPARAMETER FAILURE-HANDLING-KIND.ABORT "abort")
 (COMMON-LISP:DEFPARAMETER FAILURE-HANDLING-KIND.TRANSACTIONAL "transactional")
 (COMMON-LISP:DEFPARAMETER FAILURE-HANDLING-KIND.TEXT-ONLY-TRANSACTIONAL "textOnlyTransactional")
 (COMMON-LISP:DEFPARAMETER FAILURE-HANDLING-KIND.UNDO "undo"))

(COMMON-LISP:DEFCLASS TEXT-DOCUMENT-IDENTIFIER COMMON-LISP:NIL
                      ((URI :INITARG :URI :DOCUMENTATION "*
* The text document's URI."
                        :TYPE DOCUMENT-URI)))

(COMMON-LISP:DEFCLASS TEXT-DOCUMENT-ITEM COMMON-LISP:NIL
                      ((URI :INITARG :URI :DOCUMENTATION "*
* The text document's URI."
                        :TYPE DOCUMENT-URI)
                       (LANGUAGE-ID :INITARG :LANGUAGE-ID :DOCUMENTATION "*
* The text document's language identifier."
                        :TYPE COMMON-LISP:STRING)
                       (VERSION :INITARG :VERSION :DOCUMENTATION "*
* The version number of this document (it will increase after each
* change, including undo/redo)."
                        :TYPE COMMON-LISP:NUMBER)
                       (TEXT :INITARG :TEXT :DOCUMENTATION "*
* The content of the opened text document."
                        :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:DEFCLASS VERSIONED-TEXT-DOCUMENT-IDENTIFIER (TEXT-DOCUMENT-IDENTIFIER)
                      ((VERSION :INITARG :VERSION :DOCUMENTATION "*
* The version number of this document. If a versioned text document identifier
* is sent from the server to the client and the file is not open in the editor
* (the server has not received an open notification before) the server can send
* `null` to indicate that the version is known and the content on disk is the
* master (as speced with document content ownership).
*
* The version number of a document will increase after each change, including
* undo/redo. The number doesn't need to be consecutive."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:NUMBER NULL))))

(COMMON-LISP:DEFCLASS TEXT-DOCUMENT-POSITION-PARAMS COMMON-LISP:NIL
                      ((TEXT-DOCUMENT :INITARG :TEXT-DOCUMENT :DOCUMENTATION "*
* The text document."
                        :TYPE TEXT-DOCUMENT-IDENTIFIER)
                       (POSITION :INITARG :POSITION :DOCUMENTATION "*
* The position inside the text document."
                        :TYPE POSITION)))

(COMMON-LISP:DEFCLASS DOCUMENT-FILTER COMMON-LISP:NIL
                      ((LANGUAGE? :INITARG :LANGUAGE :DOCUMENTATION "*
* A language id, like `typescript`."
                        :TYPE COMMON-LISP:STRING)
                       (SCHEME? :INITARG :SCHEME :DOCUMENTATION "*
* A Uri [scheme](#Uri.scheme), like `file` or `untitled`."
                        :TYPE COMMON-LISP:STRING)
                       (PATTERN? :INITARG :PATTERN :DOCUMENTATION "*
* A glob pattern, like `*.{ts,js}`.
*
* Glob patterns can have the following syntax:
* - `*` to match one or more characters in a path segment
* - `?` to match on one character in a path segment
* - `**` to match any number of path segments, including none
* - `{}` to group conditions (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)
* - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
* - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)"
                        :TYPE COMMON-LISP:STRING)))

COMMON-LISP:NIL

(COMMON-LISP:DEFCLASS STATIC-REGISTRATION-OPTIONS COMMON-LISP:NIL
                      ((ID? :INITARG :ID :DOCUMENTATION "*
* The id used to register the request. The id can be used to deregister
* the request again. See also Registration#id."
                        :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:DEFCLASS TEXT-DOCUMENT-REGISTRATION-OPTIONS COMMON-LISP:NIL
                      ((DOCUMENT-SELECTOR :INITARG :DOCUMENT-SELECTOR :DOCUMENTATION "*
* A document selector to identify the scope of the registration. If set to null
* the document selector provided on the client side will be used."
                        :TYPE (COMMON-LISP:OR DOCUMENT-SELECTOR NULL))))

(COMMON-LISP:PROGN (COMMON-LISP:DEFPARAMETER MARKUP-KIND.PLAIN-TEXT "plaintext") (COMMON-LISP:DEFPARAMETER MARKUP-KIND.MARKDOWN "markdown"))

COMMON-LISP:NIL

(COMMON-LISP:DEFCLASS MARKUP-CONTENT COMMON-LISP:NIL
                      ((KIND :INITARG :KIND :DOCUMENTATION "*
* The type of the Markup"
                        :TYPE MARKUP-KIND)
                       (VALUE :INITARG :VALUE :DOCUMENTATION "*
* The content itself"
                        :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:DEFCLASS WORK-DONE-PROGRESS-BEGIN COMMON-LISP:NIL
                      ((KIND :INITARG :KIND :DOCUMENTATION "" :TYPE (LEM-LSP-MODE/TYPE:EQUAL-SPECIALIZER "begin"))
                       (TITLE :INITARG :TITLE :DOCUMENTATION "*
* Mandatory title of the progress operation. Used to briefly inform about
* the kind of operation being performed.
*
* Examples: \"Indexing\" or \"Linking dependencies\"."
                        :TYPE COMMON-LISP:STRING)
                       (CANCELLABLE? :INITARG :CANCELLABLE :DOCUMENTATION "*
* Controls if a cancel button should show to allow the user to cancel the
* long running operation. Clients that don't support cancellation are allowed
* to ignore the setting."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (MESSAGE? :INITARG :MESSAGE :DOCUMENTATION "*
* Optional, more detailed associated progress message. Contains
* complementary information to the `title`.
*
* Examples: \"3/25 files\", \"project/src/module2\", \"node_modules/some_dep\".
* If unset, the previous progress message (if any) is still valid."
                        :TYPE COMMON-LISP:STRING)
                       (PERCENTAGE? :INITARG :PERCENTAGE :DOCUMENTATION "*
* Optional progress percentage to display (value 100 is considered 100%).
* If not provided infinite progress is assumed and clients are allowed
* to ignore the `percentage` value in subsequent in report notifications.
*
* The value should be steadily rising. Clients are free to ignore values
* that are not following this rule."
                        :TYPE COMMON-LISP:NUMBER)))

(COMMON-LISP:DEFCLASS WORK-DONE-PROGRESS-REPORT COMMON-LISP:NIL
                      ((KIND :INITARG :KIND :DOCUMENTATION "" :TYPE (LEM-LSP-MODE/TYPE:EQUAL-SPECIALIZER "report"))
                       (CANCELLABLE? :INITARG :CANCELLABLE :DOCUMENTATION "*
* Controls enablement state of a cancel button. This property is only valid if a cancel
* button got requested in the `WorkDoneProgressStart` payload.
*
* Clients that don't support cancellation or don't support control the button's
* enablement state are allowed to ignore the setting."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (MESSAGE? :INITARG :MESSAGE :DOCUMENTATION "*
* Optional, more detailed associated progress message. Contains
* complementary information to the `title`.
*
* Examples: \"3/25 files\", \"project/src/module2\", \"node_modules/some_dep\".
* If unset, the previous progress message (if any) is still valid."
                        :TYPE COMMON-LISP:STRING)
                       (PERCENTAGE? :INITARG :PERCENTAGE :DOCUMENTATION "*
* Optional progress percentage to display (value 100 is considered 100%).
* If not provided infinite progress is assumed and clients are allowed
* to ignore the `percentage` value in subsequent in report notifications.
*
* The value should be steadily rising. Clients are free to ignore values
* that are not following this rule."
                        :TYPE COMMON-LISP:NUMBER)))

(COMMON-LISP:DEFCLASS WORK-DONE-PROGRESS-END COMMON-LISP:NIL
                      ((KIND :INITARG :KIND :DOCUMENTATION "" :TYPE (LEM-LSP-MODE/TYPE:EQUAL-SPECIALIZER "end"))
                       (MESSAGE? :INITARG :MESSAGE :DOCUMENTATION "*
* Optional, a final message indicating to for example indicate the outcome
* of the operation."
                        :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:DEFCLASS WORK-DONE-PROGRESS-PARAMS COMMON-LISP:NIL
                      ((WORK-DONE-TOKEN? :INITARG :WORK-DONE-TOKEN :DOCUMENTATION "*
* An optional token that a server can use to report work done progress."
                        :TYPE PROGRESS-TOKEN)))

(COMMON-LISP:DEFCLASS WORK-DONE-PROGRESS-OPTIONS COMMON-LISP:NIL ((WORK-DONE-PROGRESS? :INITARG :WORK-DONE-PROGRESS :DOCUMENTATION "" :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS PARTIAL-RESULT-PARAMS COMMON-LISP:NIL
                      ((PARTIAL-RESULT-TOKEN? :INITARG :PARTIAL-RESULT-TOKEN :DOCUMENTATION "*
* An optional token that a server can use to report partial results (e.g. streaming) to
* the client."
                        :TYPE PROGRESS-TOKEN)))

(COMMON-LISP:DEFCLASS INITIALIZE-PARAMS (WORK-DONE-PROGRESS-PARAMS)
                      ((PROCESS-ID :INITARG :PROCESS-ID :DOCUMENTATION "*
* The process Id of the parent process that started
* the server. Is null if the process has not been started by another process.
* If the parent process is not alive then the server should exit (see exit notification) its process."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:NUMBER NULL))
                       (CLIENT-INFO? :INITARG :CLIENT-INFO :DOCUMENTATION "*
* Information about the client
*
* @since 3.15.0"
                        :TYPE (LEM-LSP-MODE/TYPE:INTERFACE ("name" :TYPE COMMON-LISP:STRING) ("version" :TYPE COMMON-LISP:STRING)))
                       (ROOT-PATH? :INITARG :ROOT-PATH :DOCUMENTATION "*
* The rootPath of the workspace. Is null
* if no folder is open.
*
* @deprecated in favour of rootUri."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:STRING NULL))
                       (ROOT-URI :INITARG :ROOT-URI :DOCUMENTATION "*
* The rootUri of the workspace. Is null if no
* folder is open. If both `rootPath` and `rootUri` are set
* `rootUri` wins."
                        :TYPE (COMMON-LISP:OR DOCUMENT-URI NULL))
                       (INITIALIZATION-OPTIONS? :INITARG :INITIALIZATION-OPTIONS :DOCUMENTATION "*
* User provided initialization options."
                        :TYPE COMMON-LISP:T)
                       (CAPABILITIES :INITARG :CAPABILITIES :DOCUMENTATION "*
* The capabilities provided by the client (editor or tool)"
                        :TYPE CLIENT-CAPABILITIES)
                       (TRACE? :INITARG :TRACE :DOCUMENTATION "*
* The initial trace setting. If omitted trace is disabled ('off')."
                        :TYPE (COMMON-LISP:OR (LEM-LSP-MODE/TYPE:EQUAL-SPECIALIZER "off") (LEM-LSP-MODE/TYPE:EQUAL-SPECIALIZER "messages") (LEM-LSP-MODE/TYPE:EQUAL-SPECIALIZER "verbose")))
                       (WORKSPACE-FOLDERS? :INITARG :WORKSPACE-FOLDERS :DOCUMENTATION "*
* The workspace folders configured in the client when the server starts.
* This property is only available if the client supports workspace folders.
* It can be `null` if the client supports workspace folders but none are
* configured.
*
* @since 3.6.0"
                        :TYPE (COMMON-LISP:OR (LEM-LSP-MODE/TYPE:LSP-ARRAY WORKSPACE-FOLDER) NULL))))

(COMMON-LISP:DEFCLASS TEXT-DOCUMENT-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((SYNCHRONIZATION? :INITARG :SYNCHRONIZATION :DOCUMENTATION "" :TYPE TEXT-DOCUMENT-SYNC-CLIENT-CAPABILITIES)
                       (COMPLETION? :INITARG :COMPLETION :DOCUMENTATION "*
* Capabilities specific to the `textDocument/completion` request."
                        :TYPE COMPLETION-CLIENT-CAPABILITIES)
                       (HOVER? :INITARG :HOVER :DOCUMENTATION "*
* Capabilities specific to the `textDocument/hover` request."
                        :TYPE HOVER-CLIENT-CAPABILITIES)
                       (SIGNATURE-HELP? :INITARG :SIGNATURE-HELP :DOCUMENTATION "*
* Capabilities specific to the `textDocument/signatureHelp` request."
                        :TYPE SIGNATURE-HELP-CLIENT-CAPABILITIES)
                       (DECLARATION? :INITARG :DECLARATION :DOCUMENTATION "*
* Capabilities specific to the `textDocument/declaration` request.
*
* @since 3.14.0"
                        :TYPE DECLARATION-CLIENT-CAPABILITIES)
                       (DEFINITION? :INITARG :DEFINITION :DOCUMENTATION "*
* Capabilities specific to the `textDocument/definition` request."
                        :TYPE DEFINITION-CLIENT-CAPABILITIES)
                       (TYPE-DEFINITION? :INITARG :TYPE-DEFINITION :DOCUMENTATION "*
* Capabilities specific to the `textDocument/typeDefinition` request.
*
* @since 3.6.0"
                        :TYPE TYPE-DEFINITION-CLIENT-CAPABILITIES)
                       (IMPLEMENTATION? :INITARG :IMPLEMENTATION :DOCUMENTATION "*
* Capabilities specific to the `textDocument/implementation` request.
*
* @since 3.6.0"
                        :TYPE IMPLEMENTATION-CLIENT-CAPABILITIES)
                       (REFERENCES? :INITARG :REFERENCES :DOCUMENTATION "*
* Capabilities specific to the `textDocument/references` request."
                        :TYPE REFERENCE-CLIENT-CAPABILITIES)
                       (DOCUMENT-HIGHLIGHT? :INITARG :DOCUMENT-HIGHLIGHT :DOCUMENTATION "*
* Capabilities specific to the `textDocument/documentHighlight` request."
                        :TYPE DOCUMENT-HIGHLIGHT-CLIENT-CAPABILITIES)
                       (DOCUMENT-SYMBOL? :INITARG :DOCUMENT-SYMBOL :DOCUMENTATION "*
* Capabilities specific to the `textDocument/documentSymbol` request."
                        :TYPE DOCUMENT-SYMBOL-CLIENT-CAPABILITIES)
                       (CODE-ACTION? :INITARG :CODE-ACTION :DOCUMENTATION "*
* Capabilities specific to the `textDocument/codeAction` request."
                        :TYPE CODE-ACTION-CLIENT-CAPABILITIES)
                       (CODE-LENS? :INITARG :CODE-LENS :DOCUMENTATION "*
* Capabilities specific to the `textDocument/codeLens` request."
                        :TYPE CODE-LENS-CLIENT-CAPABILITIES)
                       (DOCUMENT-LINK? :INITARG :DOCUMENT-LINK :DOCUMENTATION "*
* Capabilities specific to the `textDocument/documentLink` request."
                        :TYPE DOCUMENT-LINK-CLIENT-CAPABILITIES)
                       (COLOR-PROVIDER? :INITARG :COLOR-PROVIDER :DOCUMENTATION "*
* Capabilities specific to the `textDocument/documentColor` and the
* `textDocument/colorPresentation` request.
*
* @since 3.6.0"
                        :TYPE DOCUMENT-COLOR-CLIENT-CAPABILITIES)
                       (FORMATTING? :INITARG :FORMATTING :DOCUMENTATION "*
* Capabilities specific to the `textDocument/formatting` request."
                        :TYPE DOCUMENT-FORMATTING-CLIENT-CAPABILITIES)
                       (RANGE-FORMATTING? :INITARG :RANGE-FORMATTING :DOCUMENTATION "*
* Capabilities specific to the `textDocument/rangeFormatting` request."
                        :TYPE DOCUMENT-RANGE-FORMATTING-CLIENT-CAPABILITIES)
                       (ON-TYPE-FORMATTING? :INITARG :ON-TYPE-FORMATTING :DOCUMENTATION "* request.
* Capabilities specific to the `textDocument/onTypeFormatting` request."
                        :TYPE DOCUMENT-ON-TYPE-FORMATTING-CLIENT-CAPABILITIES)
                       (RENAME? :INITARG :RENAME :DOCUMENTATION "*
* Capabilities specific to the `textDocument/rename` request."
                        :TYPE RENAME-CLIENT-CAPABILITIES)
                       (PUBLISH-DIAGNOSTICS? :INITARG :PUBLISH-DIAGNOSTICS :DOCUMENTATION "*
* Capabilities specific to the `textDocument/publishDiagnostics` notification."
                        :TYPE PUBLISH-DIAGNOSTICS-CLIENT-CAPABILITIES)
                       (FOLDING-RANGE? :INITARG :FOLDING-RANGE :DOCUMENTATION "*
* Capabilities specific to the `textDocument/foldingRange` request.
*
* @since 3.10.0"
                        :TYPE FOLDING-RANGE-CLIENT-CAPABILITIES)
                       (SELECTION-RANGE? :INITARG :SELECTION-RANGE :DOCUMENTATION "*
* Capabilities specific to the `textDocument/selectionRange` request.
*
* @since 3.15.0"
                        :TYPE SELECTION-RANGE-CLIENT-CAPABILITIES)))

(COMMON-LISP:DEFCLASS CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((WORKSPACE? :INITARG :WORKSPACE :DOCUMENTATION "*
* Workspace specific client capabilities."
                        :TYPE
                        (LEM-LSP-MODE/TYPE:INTERFACE ("applyEdit" :TYPE COMMON-LISP:BOOLEAN) ("workspaceEdit" :TYPE WORKSPACE-EDIT-CLIENT-CAPABILITIES)
                         ("didChangeConfiguration" :TYPE DID-CHANGE-CONFIGURATION-CLIENT-CAPABILITIES) ("didChangeWatchedFiles" :TYPE DID-CHANGE-WATCHED-FILES-CLIENT-CAPABILITIES)
                         ("symbol" :TYPE WORKSPACE-SYMBOL-CLIENT-CAPABILITIES) ("executeCommand" :TYPE EXECUTE-COMMAND-CLIENT-CAPABILITIES) ("workspaceFolders" :TYPE COMMON-LISP:BOOLEAN)
                         ("configuration" :TYPE COMMON-LISP:BOOLEAN)))
                       (TEXT-DOCUMENT? :INITARG :TEXT-DOCUMENT :DOCUMENTATION "*
* Text document specific client capabilities."
                        :TYPE TEXT-DOCUMENT-CLIENT-CAPABILITIES)
                       (WINDOW? :INITARG :WINDOW :DOCUMENTATION "*
* Window specific client capabilities."
                        :TYPE (LEM-LSP-MODE/TYPE:INTERFACE ("workDoneProgress" :TYPE COMMON-LISP:BOOLEAN)))
                       (EXPERIMENTAL? :INITARG :EXPERIMENTAL :DOCUMENTATION "*
* Experimental client capabilities."
                        :TYPE COMMON-LISP:T)))

(COMMON-LISP:DEFCLASS INITIALIZE-RESULT COMMON-LISP:NIL
                      ((CAPABILITIES :INITARG :CAPABILITIES :DOCUMENTATION "*
* The capabilities the language server provides."
                        :TYPE SERVER-CAPABILITIES)
                       (SERVER-INFO? :INITARG :SERVER-INFO :DOCUMENTATION "*
* Information about the server.
*
* @since 3.15.0"
                        :TYPE (LEM-LSP-MODE/TYPE:INTERFACE ("name" :TYPE COMMON-LISP:STRING) ("version" :TYPE COMMON-LISP:STRING)))))

(COMMON-LISP:PROGN (COMMON-LISP:DEFPARAMETER INITIALIZE-ERROR.UNKNOWN-PROTOCOL-VERSION 1))

(COMMON-LISP:DEFCLASS INITIALIZE-ERROR COMMON-LISP:NIL
                      ((RETRY :INITARG :RETRY :DOCUMENTATION "*
* Indicates whether the client execute the following retry logic:
* (1) show the message provided by the ResponseError to the user
* (2) user selects retry or cancel
* (3) if user selected retry the initialize method is sent again."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS SERVER-CAPABILITIES COMMON-LISP:NIL
                      ((TEXT-DOCUMENT-SYNC? :INITARG :TEXT-DOCUMENT-SYNC :DOCUMENTATION "*
* Defines how text documents are synced. Is either a detailed structure defining each notification or
* for backwards compatibility the TextDocumentSyncKind number. If omitted it defaults to `TextDocumentSyncKind.None`."
                        :TYPE (COMMON-LISP:OR TEXT-DOCUMENT-SYNC-OPTIONS COMMON-LISP:NUMBER))
                       (COMPLETION-PROVIDER? :INITARG :COMPLETION-PROVIDER :DOCUMENTATION "*
* The server provides completion support."
                        :TYPE COMPLETION-OPTIONS)
                       (HOVER-PROVIDER? :INITARG :HOVER-PROVIDER :DOCUMENTATION "*
* The server provides hover support."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:BOOLEAN HOVER-OPTIONS))
                       (SIGNATURE-HELP-PROVIDER? :INITARG :SIGNATURE-HELP-PROVIDER :DOCUMENTATION "*
* The server provides signature help support."
                        :TYPE SIGNATURE-HELP-OPTIONS)
                       (DECLARATION-PROVIDER? :INITARG :DECLARATION-PROVIDER :DOCUMENTATION "*
* The server provides go to declaration support.
*
* @since 3.14.0"
                        :TYPE (COMMON-LISP:OR COMMON-LISP:BOOLEAN DECLARATION-OPTIONS DECLARATION-REGISTRATION-OPTIONS))
                       (DEFINITION-PROVIDER? :INITARG :DEFINITION-PROVIDER :DOCUMENTATION "*
* The server provides goto definition support."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:BOOLEAN DEFINITION-OPTIONS))
                       (TYPE-DEFINITION-PROVIDER? :INITARG :TYPE-DEFINITION-PROVIDER :DOCUMENTATION "*
* The server provides goto type definition support.
*
* @since 3.6.0"
                        :TYPE (COMMON-LISP:OR COMMON-LISP:BOOLEAN TYPE-DEFINITION-OPTIONS TYPE-DEFINITION-REGISTRATION-OPTIONS))
                       (IMPLEMENTATION-PROVIDER? :INITARG :IMPLEMENTATION-PROVIDER :DOCUMENTATION "*
* The server provides goto implementation support.
*
* @since 3.6.0"
                        :TYPE (COMMON-LISP:OR COMMON-LISP:BOOLEAN IMPLEMENTATION-OPTIONS IMPLEMENTATION-REGISTRATION-OPTIONS))
                       (REFERENCES-PROVIDER? :INITARG :REFERENCES-PROVIDER :DOCUMENTATION "*
* The server provides find references support."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:BOOLEAN REFERENCE-OPTIONS))
                       (DOCUMENT-HIGHLIGHT-PROVIDER? :INITARG :DOCUMENT-HIGHLIGHT-PROVIDER :DOCUMENTATION "*
* The server provides document highlight support."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:BOOLEAN DOCUMENT-HIGHLIGHT-OPTIONS))
                       (DOCUMENT-SYMBOL-PROVIDER? :INITARG :DOCUMENT-SYMBOL-PROVIDER :DOCUMENTATION "*
* The server provides document symbol support."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:BOOLEAN DOCUMENT-SYMBOL-OPTIONS))
                       (CODE-ACTION-PROVIDER? :INITARG :CODE-ACTION-PROVIDER :DOCUMENTATION "*
* The server provides code actions. The `CodeActionOptions` return type is only
* valid if the client signals code action literal support via the property
* `textDocument.codeAction.codeActionLiteralSupport`."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:BOOLEAN CODE-ACTION-OPTIONS))
                       (CODE-LENS-PROVIDER? :INITARG :CODE-LENS-PROVIDER :DOCUMENTATION "*
* The server provides code lens."
                        :TYPE CODE-LENS-OPTIONS)
                       (DOCUMENT-LINK-PROVIDER? :INITARG :DOCUMENT-LINK-PROVIDER :DOCUMENTATION "*
* The server provides document link support."
                        :TYPE DOCUMENT-LINK-OPTIONS)
                       (COLOR-PROVIDER? :INITARG :COLOR-PROVIDER :DOCUMENTATION "*
* The server provides color provider support.
*
* @since 3.6.0"
                        :TYPE (COMMON-LISP:OR COMMON-LISP:BOOLEAN DOCUMENT-COLOR-OPTIONS DOCUMENT-COLOR-REGISTRATION-OPTIONS))
                       (DOCUMENT-FORMATTING-PROVIDER? :INITARG :DOCUMENT-FORMATTING-PROVIDER :DOCUMENTATION "*
* The server provides document formatting."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:BOOLEAN DOCUMENT-FORMATTING-OPTIONS))
                       (DOCUMENT-RANGE-FORMATTING-PROVIDER? :INITARG :DOCUMENT-RANGE-FORMATTING-PROVIDER :DOCUMENTATION "*
* The server provides document range formatting."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:BOOLEAN DOCUMENT-RANGE-FORMATTING-OPTIONS))
                       (DOCUMENT-ON-TYPE-FORMATTING-PROVIDER? :INITARG :DOCUMENT-ON-TYPE-FORMATTING-PROVIDER :DOCUMENTATION "*
* The server provides document formatting on typing."
                        :TYPE DOCUMENT-ON-TYPE-FORMATTING-OPTIONS)
                       (RENAME-PROVIDER? :INITARG :RENAME-PROVIDER :DOCUMENTATION "*
* The server provides rename support. RenameOptions may only be
* specified if the client states that it supports
* `prepareSupport` in its initial `initialize` request."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:BOOLEAN RENAME-OPTIONS))
                       (FOLDING-RANGE-PROVIDER? :INITARG :FOLDING-RANGE-PROVIDER :DOCUMENTATION "*
* The server provides folding provider support.
*
* @since 3.10.0"
                        :TYPE (COMMON-LISP:OR COMMON-LISP:BOOLEAN FOLDING-RANGE-OPTIONS FOLDING-RANGE-REGISTRATION-OPTIONS))
                       (EXECUTE-COMMAND-PROVIDER? :INITARG :EXECUTE-COMMAND-PROVIDER :DOCUMENTATION "*
* The server provides execute command support."
                        :TYPE EXECUTE-COMMAND-OPTIONS)
                       (SELECTION-RANGE-PROVIDER? :INITARG :SELECTION-RANGE-PROVIDER :DOCUMENTATION "*
* The server provides selection range support.
*
* @since 3.15.0"
                        :TYPE (COMMON-LISP:OR COMMON-LISP:BOOLEAN SELECTION-RANGE-OPTIONS SELECTION-RANGE-REGISTRATION-OPTIONS))
                       (WORKSPACE-SYMBOL-PROVIDER? :INITARG :WORKSPACE-SYMBOL-PROVIDER :DOCUMENTATION "*
* The server provides workspace symbol support."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (WORKSPACE? :INITARG :WORKSPACE :DOCUMENTATION "*
* Workspace specific server capabilities"
                        :TYPE (LEM-LSP-MODE/TYPE:INTERFACE ("workspaceFolders" :TYPE WORKSPACE-FOLDERS-SERVER-CAPABILITIES)))
                       (EXPERIMENTAL? :INITARG :EXPERIMENTAL :DOCUMENTATION "*
* Experimental server capabilities."
                        :TYPE COMMON-LISP:T)))

(COMMON-LISP:DEFCLASS INITIALIZED-PARAMS COMMON-LISP:NIL COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS SHOW-MESSAGE-PARAMS COMMON-LISP:NIL
                      ((TYPE :INITARG :TYPE :DOCUMENTATION "*
* The message type. See {@link MessageType}."
                        :TYPE COMMON-LISP:NUMBER)
                       (MESSAGE :INITARG :MESSAGE :DOCUMENTATION "*
* The actual message."
                        :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:PROGN
 (COMMON-LISP:DEFPARAMETER MESSAGE-TYPE.ERROR 1)
 (COMMON-LISP:DEFPARAMETER MESSAGE-TYPE.WARNING 2)
 (COMMON-LISP:DEFPARAMETER MESSAGE-TYPE.INFO 3)
 (COMMON-LISP:DEFPARAMETER MESSAGE-TYPE.LOG 4))

(COMMON-LISP:DEFCLASS SHOW-MESSAGE-REQUEST-PARAMS COMMON-LISP:NIL
                      ((TYPE :INITARG :TYPE :DOCUMENTATION "*
* The message type. See {@link MessageType}"
                        :TYPE COMMON-LISP:NUMBER)
                       (MESSAGE :INITARG :MESSAGE :DOCUMENTATION "*
* The actual message"
                        :TYPE COMMON-LISP:STRING)
                       (ACTIONS? :INITARG :ACTIONS :DOCUMENTATION "*
* The message action items to present."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY MESSAGE-ACTION-ITEM))))

(COMMON-LISP:DEFCLASS MESSAGE-ACTION-ITEM COMMON-LISP:NIL
                      ((TITLE :INITARG :TITLE :DOCUMENTATION "*
* A short title like 'Retry', 'Open Log' etc."
                        :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:DEFCLASS LOG-MESSAGE-PARAMS COMMON-LISP:NIL
                      ((TYPE :INITARG :TYPE :DOCUMENTATION "*
* The message type. See {@link MessageType}"
                        :TYPE COMMON-LISP:NUMBER)
                       (MESSAGE :INITARG :MESSAGE :DOCUMENTATION "*
* The actual message"
                        :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:DEFCLASS WORK-DONE-PROGRESS-CREATE-PARAMS COMMON-LISP:NIL
                      ((TOKEN :INITARG :TOKEN :DOCUMENTATION "*
* The token to be used to report progress."
                        :TYPE PROGRESS-TOKEN)))

(COMMON-LISP:DEFCLASS WORK-DONE-PROGRESS-CANCEL-PARAMS COMMON-LISP:NIL
                      ((TOKEN :INITARG :TOKEN :DOCUMENTATION "*
* The token to be used to report progress."
                        :TYPE PROGRESS-TOKEN)))

(COMMON-LISP:DEFCLASS REGISTRATION COMMON-LISP:NIL
                      ((ID :INITARG :ID :DOCUMENTATION "*
* The id used to register the request. The id can be used to deregister
* the request again."
                        :TYPE COMMON-LISP:STRING)
                       (METHOD :INITARG :METHOD :DOCUMENTATION "*
* The method / capability to register for."
                        :TYPE COMMON-LISP:STRING)
                       (REGISTER-OPTIONS? :INITARG :REGISTER-OPTIONS :DOCUMENTATION "*
* Options necessary for the registration."
                        :TYPE COMMON-LISP:T)))

(COMMON-LISP:DEFCLASS REGISTRATION-PARAMS COMMON-LISP:NIL ((REGISTRATIONS :INITARG :REGISTRATIONS :DOCUMENTATION "" :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY REGISTRATION))))

(COMMON-LISP:DEFCLASS UNREGISTRATION COMMON-LISP:NIL
                      ((ID :INITARG :ID :DOCUMENTATION "*
* The id used to unregister the request or notification. Usually an id
* provided during the register request."
                        :TYPE COMMON-LISP:STRING)
                       (METHOD :INITARG :METHOD :DOCUMENTATION "*
* The method / capability to unregister for."
                        :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:DEFCLASS UNREGISTRATION-PARAMS COMMON-LISP:NIL
                      ((UNREGISTERATIONS :INITARG :UNREGISTERATIONS :DOCUMENTATION "This should correctly be named `unregistrations`. However changing this
 is a breaking change and needs to wait until we deliver a 4.x version
 of the specification."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY UNREGISTRATION))))

(COMMON-LISP:DEFCLASS WORKSPACE-FOLDERS-SERVER-CAPABILITIES COMMON-LISP:NIL
                      ((SUPPORTED? :INITARG :SUPPORTED :DOCUMENTATION "*
* The server has support for workspace folders"
                        :TYPE COMMON-LISP:BOOLEAN)
                       (CHANGE-NOTIFICATIONS? :INITARG :CHANGE-NOTIFICATIONS :DOCUMENTATION "*
* Whether the server wants to receive workspace folder
* change notifications.
*
* If a string is provided, the string is treated as an ID
* under which the notification is registered on the client
* side. The ID can be used to unregister for these events
* using the `client/unregisterCapability` request."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:STRING COMMON-LISP:BOOLEAN))))

(COMMON-LISP:DEFCLASS WORKSPACE-FOLDER COMMON-LISP:NIL
                      ((URI :INITARG :URI :DOCUMENTATION "*
* The associated URI for this workspace folder."
                        :TYPE DOCUMENT-URI)
                       (NAME :INITARG :NAME :DOCUMENTATION "*
* The name of the workspace folder. Used to refer to this
* workspace folder in the user interface."
                        :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:DEFCLASS DID-CHANGE-WORKSPACE-FOLDERS-PARAMS COMMON-LISP:NIL
                      ((EVENT :INITARG :EVENT :DOCUMENTATION "*
* The actual workspace folder change event."
                        :TYPE WORKSPACE-FOLDERS-CHANGE-EVENT)))

(COMMON-LISP:DEFCLASS WORKSPACE-FOLDERS-CHANGE-EVENT COMMON-LISP:NIL
                      ((ADDED :INITARG :ADDED :DOCUMENTATION "*
* The array of added workspace folders"
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY WORKSPACE-FOLDER))
                       (REMOVED :INITARG :REMOVED :DOCUMENTATION "*
* The array of the removed workspace folders"
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY WORKSPACE-FOLDER))))

(COMMON-LISP:DEFCLASS DID-CHANGE-CONFIGURATION-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Did change configuration notification supports dynamic registration."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS DID-CHANGE-CONFIGURATION-PARAMS COMMON-LISP:NIL
                      ((SETTINGS :INITARG :SETTINGS :DOCUMENTATION "*
* The actual changed settings"
                        :TYPE COMMON-LISP:T)))

(COMMON-LISP:DEFCLASS CONFIGURATION-PARAMS COMMON-LISP:NIL ((ITEMS :INITARG :ITEMS :DOCUMENTATION "" :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY CONFIGURATION-ITEM))))

(COMMON-LISP:DEFCLASS CONFIGURATION-ITEM COMMON-LISP:NIL
                      ((SCOPE-URI? :INITARG :SCOPE-URI :DOCUMENTATION "*
* The scope to get the configuration section for."
                        :TYPE DOCUMENT-URI)
                       (SECTION? :INITARG :SECTION :DOCUMENTATION "*
* The configuration section asked for."
                        :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:DEFCLASS DID-CHANGE-WATCHED-FILES-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Did change watched files notification supports dynamic registration. Please note
* that the current protocol doesn't support static configuration for file changes
* from the server side."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS DID-CHANGE-WATCHED-FILES-REGISTRATION-OPTIONS COMMON-LISP:NIL
                      ((WATCHERS :INITARG :WATCHERS :DOCUMENTATION "*
* The watchers to register."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY FILE-SYSTEM-WATCHER))))

(COMMON-LISP:DEFCLASS FILE-SYSTEM-WATCHER COMMON-LISP:NIL
                      ((GLOB-PATTERN :INITARG :GLOB-PATTERN :DOCUMENTATION "*
* The  glob pattern to watch.
*
* Glob patterns can have the following syntax:
* - `*` to match one or more characters in a path segment
* - `?` to match on one character in a path segment
* - `**` to match any number of path segments, including none
* - `{}` to group conditions (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)
* - `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
* - `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)"
                        :TYPE COMMON-LISP:STRING)
                       (KIND? :INITARG :KIND :DOCUMENTATION "*
* The kind of events of interest. If omitted it defaults
* to WatchKind.Create | WatchKind.Change | WatchKind.Delete
* which is 7."
                        :TYPE COMMON-LISP:NUMBER)))

(COMMON-LISP:PROGN (COMMON-LISP:DEFPARAMETER WATCH-KIND.CREATE 1) (COMMON-LISP:DEFPARAMETER WATCH-KIND.CHANGE 2) (COMMON-LISP:DEFPARAMETER WATCH-KIND.DELETE 4))

(COMMON-LISP:DEFCLASS DID-CHANGE-WATCHED-FILES-PARAMS COMMON-LISP:NIL
                      ((CHANGES :INITARG :CHANGES :DOCUMENTATION "*
* The actual file events."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY FILE-EVENT))))

(COMMON-LISP:DEFCLASS FILE-EVENT COMMON-LISP:NIL
                      ((URI :INITARG :URI :DOCUMENTATION "*
* The file's URI."
                        :TYPE DOCUMENT-URI)
                       (TYPE :INITARG :TYPE :DOCUMENTATION "*
* The change type."
                        :TYPE COMMON-LISP:NUMBER)))

(COMMON-LISP:PROGN (COMMON-LISP:DEFPARAMETER FILE-CHANGE-TYPE.CREATED 1) (COMMON-LISP:DEFPARAMETER FILE-CHANGE-TYPE.CHANGED 2) (COMMON-LISP:DEFPARAMETER FILE-CHANGE-TYPE.DELETED 3))

(COMMON-LISP:DEFCLASS WORKSPACE-SYMBOL-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Symbol request supports dynamic registration."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (SYMBOL-KIND? :INITARG :SYMBOL-KIND :DOCUMENTATION "*
* Specific capabilities for the `SymbolKind` in the `workspace/symbol` request."
                        :TYPE (LEM-LSP-MODE/TYPE:INTERFACE ("valueSet" :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY SYMBOL-KIND))))))

(COMMON-LISP:DEFCLASS WORKSPACE-SYMBOL-OPTIONS (WORK-DONE-PROGRESS-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS WORKSPACE-SYMBOL-REGISTRATION-OPTIONS (WORKSPACE-SYMBOL-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS WORKSPACE-SYMBOL-PARAMS (WORK-DONE-PROGRESS-PARAMS PARTIAL-RESULT-PARAMS)
                      ((QUERY :INITARG :QUERY :DOCUMENTATION "*
* A query string to filter symbols by. Clients may send an empty
* string here to request all symbols."
                        :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:DEFCLASS EXECUTE-COMMAND-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Execute command supports dynamic registration."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS EXECUTE-COMMAND-OPTIONS (WORK-DONE-PROGRESS-OPTIONS)
                      ((COMMANDS :INITARG :COMMANDS :DOCUMENTATION "*
* The commands to be executed on the server"
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY COMMON-LISP:STRING))))

(COMMON-LISP:DEFCLASS EXECUTE-COMMAND-REGISTRATION-OPTIONS (EXECUTE-COMMAND-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS EXECUTE-COMMAND-PARAMS (WORK-DONE-PROGRESS-PARAMS)
                      ((COMMAND :INITARG :COMMAND :DOCUMENTATION "*
* The identifier of the actual command handler."
                        :TYPE COMMON-LISP:STRING)
                       (ARGUMENTS? :INITARG :ARGUMENTS :DOCUMENTATION "*
* Arguments that the command should be invoked with."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY COMMON-LISP:T))))

(COMMON-LISP:DEFCLASS APPLY-WORKSPACE-EDIT-PARAMS COMMON-LISP:NIL
                      ((LABEL? :INITARG :LABEL :DOCUMENTATION "*
* An optional label of the workspace edit. This label is
* presented in the user interface for example on an undo
* stack to undo the workspace edit."
                        :TYPE COMMON-LISP:STRING)
                       (EDIT :INITARG :EDIT :DOCUMENTATION "*
* The edits to apply."
                        :TYPE WORKSPACE-EDIT)))

(COMMON-LISP:DEFCLASS APPLY-WORKSPACE-EDIT-RESPONSE COMMON-LISP:NIL
                      ((APPLIED :INITARG :APPLIED :DOCUMENTATION "*
* Indicates whether the edit was applied or not."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (FAILURE-REASON? :INITARG :FAILURE-REASON :DOCUMENTATION "*
* An optional textual description for why the edit was not applied.
* This may be used may be used by the server for diagnostic
* logging or to provide a suitable error for a request that
* triggered the edit."
                        :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:PROGN (COMMON-LISP:DEFPARAMETER TEXT-DOCUMENT-SYNC-KIND.NONE 0) (COMMON-LISP:DEFPARAMETER TEXT-DOCUMENT-SYNC-KIND.FULL 1) (COMMON-LISP:DEFPARAMETER TEXT-DOCUMENT-SYNC-KIND.INCREMENTAL 2))

(COMMON-LISP:DEFCLASS TEXT-DOCUMENT-SYNC-OPTIONS COMMON-LISP:NIL
                      ((OPEN-CLOSE? :INITARG :OPEN-CLOSE :DOCUMENTATION "*
* Open and close notifications are sent to the server. If omitted open close notification should not
* be sent."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (CHANGE? :INITARG :CHANGE :DOCUMENTATION "*
* Change notifications are sent to the server. See TextDocumentSyncKind.None, TextDocumentSyncKind.Full
* and TextDocumentSyncKind.Incremental. If omitted it defaults to TextDocumentSyncKind.None."
                        :TYPE TEXT-DOCUMENT-SYNC-KIND)))

(COMMON-LISP:DEFCLASS DID-OPEN-TEXT-DOCUMENT-PARAMS COMMON-LISP:NIL
                      ((TEXT-DOCUMENT :INITARG :TEXT-DOCUMENT :DOCUMENTATION "*
* The document that was opened."
                        :TYPE TEXT-DOCUMENT-ITEM)))

(COMMON-LISP:DEFCLASS TEXT-DOCUMENT-CHANGE-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS)
                      ((SYNC-KIND :INITARG :SYNC-KIND :DOCUMENTATION "*
* How documents are synced to the server. See TextDocumentSyncKind.Full
* and TextDocumentSyncKind.Incremental."
                        :TYPE TEXT-DOCUMENT-SYNC-KIND)))

(COMMON-LISP:DEFCLASS DID-CHANGE-TEXT-DOCUMENT-PARAMS COMMON-LISP:NIL
                      ((TEXT-DOCUMENT :INITARG :TEXT-DOCUMENT :DOCUMENTATION "*
* The document that did change. The version number points
* to the version after all provided content changes have
* been applied."
                        :TYPE VERSIONED-TEXT-DOCUMENT-IDENTIFIER)
                       (CONTENT-CHANGES :INITARG :CONTENT-CHANGES :DOCUMENTATION "*
* The actual content changes. The content changes describe single state changes
* to the document. So if there are two content changes c1 (at array index 0) and
* c2 (at array index 1) for a document in state S then c1 moves the document from
* S to S' and c2 from S' to S''. So c1 is computed on the state S and c2 is computed
* on the state S'.
*
* To mirror the content of a document using change events use the following approach:
* - start with the same initial content
* - apply the 'textDocument/didChange' notifications in the order you recevie them.
* - apply the `TextDocumentContentChangeEvent`s in a single notification in the order
*   you receive them."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY TEXT-DOCUMENT-CONTENT-CHANGE-EVENT))))

COMMON-LISP:NIL

(COMMON-LISP:DEFCLASS WILL-SAVE-TEXT-DOCUMENT-PARAMS COMMON-LISP:NIL
                      ((TEXT-DOCUMENT :INITARG :TEXT-DOCUMENT :DOCUMENTATION "*
* The document that will be saved."
                        :TYPE TEXT-DOCUMENT-IDENTIFIER)
                       (REASON :INITARG :REASON :DOCUMENTATION "*
* The 'TextDocumentSaveReason'."
                        :TYPE COMMON-LISP:NUMBER)))

(COMMON-LISP:PROGN
 (COMMON-LISP:DEFPARAMETER TEXT-DOCUMENT-SAVE-REASON.MANUAL 1)
 (COMMON-LISP:DEFPARAMETER TEXT-DOCUMENT-SAVE-REASON.AFTER-DELAY 2)
 (COMMON-LISP:DEFPARAMETER TEXT-DOCUMENT-SAVE-REASON.FOCUS-OUT 3))

(COMMON-LISP:DEFCLASS SAVE-OPTIONS COMMON-LISP:NIL
                      ((INCLUDE-TEXT? :INITARG :INCLUDE-TEXT :DOCUMENTATION "*
* The client is supposed to include the content on save."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS TEXT-DOCUMENT-SAVE-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS)
                      ((INCLUDE-TEXT? :INITARG :INCLUDE-TEXT :DOCUMENTATION "*
* The client is supposed to include the content on save."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS DID-SAVE-TEXT-DOCUMENT-PARAMS COMMON-LISP:NIL
                      ((TEXT-DOCUMENT :INITARG :TEXT-DOCUMENT :DOCUMENTATION "*
* The document that was saved."
                        :TYPE TEXT-DOCUMENT-IDENTIFIER)
                       (TEXT? :INITARG :TEXT :DOCUMENTATION "*
* Optional the content when saved. Depends on the includeText value
* when the save notification was requested."
                        :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:DEFCLASS DID-CLOSE-TEXT-DOCUMENT-PARAMS COMMON-LISP:NIL
                      ((TEXT-DOCUMENT :INITARG :TEXT-DOCUMENT :DOCUMENTATION "*
* The document that was closed."
                        :TYPE TEXT-DOCUMENT-IDENTIFIER)))

(COMMON-LISP:DEFCLASS TEXT-DOCUMENT-SYNC-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether text document synchronization supports dynamic registration."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (WILL-SAVE? :INITARG :WILL-SAVE :DOCUMENTATION "*
* The client supports sending will save notifications."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (WILL-SAVE-WAIT-UNTIL? :INITARG :WILL-SAVE-WAIT-UNTIL :DOCUMENTATION "*
* The client supports sending a will save request and
* waits for a response providing text edits which will
* be applied to the document before it is saved."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (DID-SAVE? :INITARG :DID-SAVE :DOCUMENTATION "*
* The client supports did save notifications."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:PROGN (COMMON-LISP:DEFPARAMETER TEXT-DOCUMENT-SYNC-KIND.NONE 0) (COMMON-LISP:DEFPARAMETER TEXT-DOCUMENT-SYNC-KIND.FULL 1) (COMMON-LISP:DEFPARAMETER TEXT-DOCUMENT-SYNC-KIND.INCREMENTAL 2))

(COMMON-LISP:DEFCLASS TEXT-DOCUMENT-SYNC-OPTIONS COMMON-LISP:NIL
                      ((OPEN-CLOSE? :INITARG :OPEN-CLOSE :DOCUMENTATION "*
* Open and close notifications are sent to the server. If omitted open close notification should not
* be sent."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (CHANGE? :INITARG :CHANGE :DOCUMENTATION "*
* Change notifications are sent to the server. See TextDocumentSyncKind.None, TextDocumentSyncKind.Full
* and TextDocumentSyncKind.Incremental. If omitted it defaults to TextDocumentSyncKind.None."
                        :TYPE COMMON-LISP:NUMBER)
                       (WILL-SAVE? :INITARG :WILL-SAVE :DOCUMENTATION "*
* If present will save notifications are sent to the server. If omitted the notification should not be
* sent."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (WILL-SAVE-WAIT-UNTIL? :INITARG :WILL-SAVE-WAIT-UNTIL :DOCUMENTATION "*
* If present will save wait until requests are sent to the server. If omitted the request should not be
* sent."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (SAVE? :INITARG :SAVE :DOCUMENTATION "*
* If present save notifications are sent to the server. If omitted the notification should not be
* sent."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:BOOLEAN SAVE-OPTIONS))))

(COMMON-LISP:DEFCLASS PUBLISH-DIAGNOSTICS-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((RELATED-INFORMATION? :INITARG :RELATED-INFORMATION :DOCUMENTATION "*
* Whether the clients accepts diagnostics with related information."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (TAG-SUPPORT? :INITARG :TAG-SUPPORT :DOCUMENTATION "*
* Client supports the tag property to provide meta data about a diagnostic.
* Clients supporting tags have to handle unknown tags gracefully.
*
* @since 3.15.0"
                        :TYPE (LEM-LSP-MODE/TYPE:INTERFACE ("valueSet" :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY DIAGNOSTIC-TAG))))
                       (VERSION-SUPPORT? :INITARG :VERSION-SUPPORT :DOCUMENTATION "*
* Whether the client interprets the version property of the
* `textDocument/publishDiagnostics` notification's parameter.
*
* @since 3.15.0"
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS PUBLISH-DIAGNOSTICS-PARAMS COMMON-LISP:NIL
                      ((URI :INITARG :URI :DOCUMENTATION "*
* The URI for which diagnostic information is reported."
                        :TYPE DOCUMENT-URI)
                       (VERSION? :INITARG :VERSION :DOCUMENTATION "*
* Optional the version number of the document the diagnostics are published for.
*
* @since 3.15.0"
                        :TYPE COMMON-LISP:NUMBER)
                       (DIAGNOSTICS :INITARG :DIAGNOSTICS :DOCUMENTATION "*
* An array of diagnostic information items."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY DIAGNOSTIC))))

(COMMON-LISP:DEFCLASS COMPLETION-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether completion supports dynamic registration."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (COMPLETION-ITEM? :INITARG :COMPLETION-ITEM :DOCUMENTATION "*
* The client supports the following `CompletionItem` specific
* capabilities."
                        :TYPE
                        (LEM-LSP-MODE/TYPE:INTERFACE ("snippetSupport" :TYPE COMMON-LISP:BOOLEAN) ("commitCharactersSupport" :TYPE COMMON-LISP:BOOLEAN)
                         ("documentationFormat" :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY MARKUP-KIND)) ("deprecatedSupport" :TYPE COMMON-LISP:BOOLEAN) ("preselectSupport" :TYPE COMMON-LISP:BOOLEAN)
                         ("tagSupport" :TYPE (LEM-LSP-MODE/TYPE:INTERFACE ("valueSet" :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY COMPLETION-ITEM-TAG))))))
                       (COMPLETION-ITEM-KIND? :INITARG :COMPLETION-ITEM-KIND :DOCUMENTATION "" :TYPE (LEM-LSP-MODE/TYPE:INTERFACE ("valueSet" :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY COMPLETION-ITEM-KIND))))
                       (CONTEXT-SUPPORT? :INITARG :CONTEXT-SUPPORT :DOCUMENTATION "*
* The client supports to send additional context information for a
* `textDocument/completion` request."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS COMPLETION-OPTIONS (WORK-DONE-PROGRESS-OPTIONS)
                      ((TRIGGER-CHARACTERS? :INITARG :TRIGGER-CHARACTERS :DOCUMENTATION "*
* Most tools trigger completion request automatically without explicitly requesting
* it using a keyboard shortcut (e.g. Ctrl+Space). Typically they do so when the user
* starts to type an identifier. For example if the user types `c` in a JavaScript file
* code complete will automatically pop up present `console` besides others as a
* completion item. Characters that make up identifiers don't need to be listed here.
*
* If code complete should automatically be trigger on characters not being valid inside
* an identifier (for example `.` in JavaScript) list them in `triggerCharacters`."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY COMMON-LISP:STRING))
                       (ALL-COMMIT-CHARACTERS? :INITARG :ALL-COMMIT-CHARACTERS :DOCUMENTATION "*
* The list of all possible characters that commit a completion. This field can be used
* if clients don't support individual commit characters per completion item. See
* `ClientCapabilities.textDocument.completion.completionItem.commitCharactersSupport`.
*
* If a server provides both `allCommitCharacters` and commit characters on an individual
* completion item the ones on the completion item win.
*
* @since 3.2.0"
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY COMMON-LISP:STRING))
                       (RESOLVE-PROVIDER? :INITARG :RESOLVE-PROVIDER :DOCUMENTATION "*
* The server provides support to resolve additional
* information for a completion item."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS COMPLETION-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS COMPLETION-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS COMPLETION-PARAMS (TEXT-DOCUMENT-POSITION-PARAMS WORK-DONE-PROGRESS-PARAMS PARTIAL-RESULT-PARAMS)
                      ((CONTEXT? :INITARG :CONTEXT :DOCUMENTATION "*
* The completion context. This is only available if the client specifies
* to send this using `ClientCapabilities.textDocument.completion.contextSupport === true`"
                        :TYPE COMPLETION-CONTEXT)))

(COMMON-LISP:PROGN
 (COMMON-LISP:DEFPARAMETER COMPLETION-TRIGGER-KIND.INVOKED 1)
 (COMMON-LISP:DEFPARAMETER COMPLETION-TRIGGER-KIND.TRIGGER-CHARACTER 2)
 (COMMON-LISP:DEFPARAMETER COMPLETION-TRIGGER-KIND.TRIGGER-FOR-INCOMPLETE-COMPLETIONS 3))

COMMON-LISP:NIL

(COMMON-LISP:DEFCLASS COMPLETION-CONTEXT COMMON-LISP:NIL
                      ((TRIGGER-KIND :INITARG :TRIGGER-KIND :DOCUMENTATION "*
* How the completion was triggered."
                        :TYPE COMPLETION-TRIGGER-KIND)
                       (TRIGGER-CHARACTER? :INITARG :TRIGGER-CHARACTER :DOCUMENTATION "*
* The trigger character (a single character) that has trigger code complete.
* Is undefined if `triggerKind !== CompletionTriggerKind.TriggerCharacter`"
                        :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:DEFCLASS COMPLETION-LIST COMMON-LISP:NIL
                      ((IS-INCOMPLETE :INITARG :IS-INCOMPLETE :DOCUMENTATION "*
* This list it not complete. Further typing should result in recomputing
* this list."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (ITEMS :INITARG :ITEMS :DOCUMENTATION "*
* The completion items."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY COMPLETION-ITEM))))

(COMMON-LISP:PROGN (COMMON-LISP:DEFPARAMETER INSERT-TEXT-FORMAT.PLAIN-TEXT 1) (COMMON-LISP:DEFPARAMETER INSERT-TEXT-FORMAT.SNIPPET 2))

COMMON-LISP:NIL

(COMMON-LISP:PROGN (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-TAG.DEPRECATED 1))

COMMON-LISP:NIL

(COMMON-LISP:DEFCLASS COMPLETION-ITEM COMMON-LISP:NIL
                      ((LABEL :INITARG :LABEL :DOCUMENTATION "*
* The label of this completion item. By default
* also the text that is inserted when selecting
* this completion."
                        :TYPE COMMON-LISP:STRING)
                       (KIND? :INITARG :KIND :DOCUMENTATION "*
* The kind of this completion item. Based of the kind
* an icon is chosen by the editor. The standardized set
* of available values is defined in `CompletionItemKind`."
                        :TYPE COMMON-LISP:NUMBER)
                       (TAGS? :INITARG :TAGS :DOCUMENTATION "*
* Tags for this completion item.
*
* @since 3.15.0"
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY COMPLETION-ITEM-TAG))
                       (DETAIL? :INITARG :DETAIL :DOCUMENTATION "*
* A human-readable string with additional information
* about this item, like type or symbol information."
                        :TYPE COMMON-LISP:STRING)
                       (DOCUMENTATION? :INITARG :DOCUMENTATION :DOCUMENTATION "*
* A human-readable string that represents a doc-comment."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:STRING MARKUP-CONTENT))
                       (DEPRECATED? :INITARG :DEPRECATED :DOCUMENTATION "*
* Indicates if this item is deprecated.
*
* @deprecated Use `tags` instead if supported."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (PRESELECT? :INITARG :PRESELECT :DOCUMENTATION "*
* Select this item when showing.
*
* *Note* that only one completion item can be selected and that the
* tool / client decides which item that is. The rule is that the *first*
* item of those that match best is selected."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (SORT-TEXT? :INITARG :SORT-TEXT :DOCUMENTATION "*
* A string that should be used when comparing this item
* with other items. When `falsy` the label is used."
                        :TYPE COMMON-LISP:STRING)
                       (FILTER-TEXT? :INITARG :FILTER-TEXT :DOCUMENTATION "*
* A string that should be used when filtering a set of
* completion items. When `falsy` the label is used."
                        :TYPE COMMON-LISP:STRING)
                       (INSERT-TEXT? :INITARG :INSERT-TEXT :DOCUMENTATION "*
* A string that should be inserted into a document when selecting
* this completion. When `falsy` the label is used.
*
* The `insertText` is subject to interpretation by the client side.
* Some tools might not take the string literally. For example
* VS Code when code complete is requested in this example `con<cursor position>`
* and a completion item with an `insertText` of `console` is provided it
* will only insert `sole`. Therefore it is recommended to use `textEdit` instead
* since it avoids additional client side interpretation."
                        :TYPE COMMON-LISP:STRING)
                       (INSERT-TEXT-FORMAT? :INITARG :INSERT-TEXT-FORMAT :DOCUMENTATION "*
* The format of the insert text. The format applies to both the `insertText` property
* and the `newText` property of a provided `textEdit`. If omitted defaults to
* `InsertTextFormat.PlainText`."
                        :TYPE INSERT-TEXT-FORMAT)
                       (TEXT-EDIT? :INITARG :TEXT-EDIT :DOCUMENTATION "*
* An edit which is applied to a document when selecting this completion. When an edit is provided the value of
* `insertText` is ignored.
*
* *Note:* The range of the edit must be a single line range and it must contain the position at which completion
* has been requested."
                        :TYPE TEXT-EDIT)
                       (ADDITIONAL-TEXT-EDITS? :INITARG :ADDITIONAL-TEXT-EDITS :DOCUMENTATION "*
* An optional array of additional text edits that are applied when
* selecting this completion. Edits must not overlap (including the same insert position)
* with the main edit nor with themselves.
*
* Additional text edits should be used to change text unrelated to the current cursor position
* (for example adding an import statement at the top of the file if the completion item will
* insert an unqualified type)."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY TEXT-EDIT))
                       (COMMIT-CHARACTERS? :INITARG :COMMIT-CHARACTERS :DOCUMENTATION "*
* An optional set of characters that when pressed while this completion is active will accept it first and
* then type that character. *Note* that all commit characters should have `length=1` and that superfluous
* characters will be ignored."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY COMMON-LISP:STRING))
                       (COMMAND? :INITARG :COMMAND :DOCUMENTATION "*
* An optional command that is executed *after* inserting this completion. *Note* that
* additional modifications to the current document should be described with the
* additionalTextEdits-property."
                        :TYPE COMMAND)
                       (DATA? :INITARG :DATA :DOCUMENTATION "*
* A data entry field that is preserved on a completion item between
* a completion and a completion resolve request."
                        :TYPE COMMON-LISP:T)))

(COMMON-LISP:PROGN
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.TEXT 1)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.METHOD 2)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.FUNCTION 3)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.CONSTRUCTOR 4)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.FIELD 5)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.VARIABLE 6)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.CLASS 7)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.INTERFACE 8)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.MODULE 9)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.PROPERTY 10)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.UNIT 11)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.VALUE 12)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.ENUM 13)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.KEYWORD 14)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.SNIPPET 15)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.COLOR 16)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.FILE 17)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.REFERENCE 18)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.FOLDER 19)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.ENUM-MEMBER 20)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.CONSTANT 21)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.STRUCT 22)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.EVENT 23)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.OPERATOR 24)
 (COMMON-LISP:DEFPARAMETER COMPLETION-ITEM-KIND.TYPE-PARAMETER 25))

(COMMON-LISP:DEFCLASS HOVER-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether hover supports dynamic registration."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (CONTENT-FORMAT? :INITARG :CONTENT-FORMAT :DOCUMENTATION "*
* Client supports the follow content formats for the content
* property. The order describes the preferred format of the client."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY MARKUP-KIND))))

(COMMON-LISP:DEFCLASS HOVER-OPTIONS (WORK-DONE-PROGRESS-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS HOVER-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS HOVER-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS HOVER-PARAMS (TEXT-DOCUMENT-POSITION-PARAMS WORK-DONE-PROGRESS-PARAMS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS HOVER COMMON-LISP:NIL
                      ((CONTENTS :INITARG :CONTENTS :DOCUMENTATION "*
* The hover's content"
                        :TYPE (COMMON-LISP:OR MARKED-STRING (LEM-LSP-MODE/TYPE:LSP-ARRAY MARKED-STRING) MARKUP-CONTENT))
                       (RANGE? :INITARG :RANGE :DOCUMENTATION "*
* An optional range is a range inside a text document
* that is used to visualize a hover, e.g. by changing the background color."
                        :TYPE RANGE)))

COMMON-LISP:NIL

(COMMON-LISP:DEFCLASS SIGNATURE-HELP-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether signature help supports dynamic registration."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (SIGNATURE-INFORMATION? :INITARG :SIGNATURE-INFORMATION :DOCUMENTATION "*
* The client supports the following `SignatureInformation`
* specific properties."
                        :TYPE
                        (LEM-LSP-MODE/TYPE:INTERFACE ("documentationFormat" :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY MARKUP-KIND))
                         ("parameterInformation" :TYPE (LEM-LSP-MODE/TYPE:INTERFACE ("labelOffsetSupport" :TYPE COMMON-LISP:BOOLEAN)))))
                       (CONTEXT-SUPPORT? :INITARG :CONTEXT-SUPPORT :DOCUMENTATION "*
* The client supports to send additional context information for a
* `textDocument/signatureHelp` request. A client that opts into
* contextSupport will also support the `retriggerCharacters` on
* `SignatureHelpOptions`.
*
* @since 3.15.0"
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS SIGNATURE-HELP-OPTIONS (WORK-DONE-PROGRESS-OPTIONS)
                      ((TRIGGER-CHARACTERS? :INITARG :TRIGGER-CHARACTERS :DOCUMENTATION "*
* The characters that trigger signature help
* automatically."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY COMMON-LISP:STRING))
                       (RETRIGGER-CHARACTERS? :INITARG :RETRIGGER-CHARACTERS :DOCUMENTATION "*
* List of characters that re-trigger signature help.
*
* These trigger characters are only active when signature help is already showing. All trigger characters
* are also counted as re-trigger characters.
*
* @since 3.15.0"
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY COMMON-LISP:STRING))))

(COMMON-LISP:DEFCLASS SIGNATURE-HELP-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS SIGNATURE-HELP-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS SIGNATURE-HELP-PARAMS (TEXT-DOCUMENT-POSITION-PARAMS WORK-DONE-PROGRESS-PARAMS)
                      ((CONTEXT? :INITARG :CONTEXT :DOCUMENTATION "*
* The signature help context. This is only available if the client specifies
* to send this using the client capability  `textDocument.signatureHelp.contextSupport === true`
*
* @since 3.15.0"
                        :TYPE SIGNATURE-HELP-CONTEXT)))

(COMMON-LISP:PROGN
 (COMMON-LISP:DEFPARAMETER SIGNATURE-HELP-TRIGGER-KIND.INVOKED 1)
 (COMMON-LISP:DEFPARAMETER SIGNATURE-HELP-TRIGGER-KIND.TRIGGER-CHARACTER 2)
 (COMMON-LISP:DEFPARAMETER SIGNATURE-HELP-TRIGGER-KIND.CONTENT-CHANGE 3))

COMMON-LISP:NIL

(COMMON-LISP:DEFCLASS SIGNATURE-HELP-CONTEXT COMMON-LISP:NIL
                      ((TRIGGER-KIND :INITARG :TRIGGER-KIND :DOCUMENTATION "*
* Action that caused signature help to be triggered."
                        :TYPE SIGNATURE-HELP-TRIGGER-KIND)
                       (TRIGGER-CHARACTER? :INITARG :TRIGGER-CHARACTER :DOCUMENTATION "*
* Character that caused signature help to be triggered.
*
* This is undefined when `triggerKind !== SignatureHelpTriggerKind.TriggerCharacter`"
                        :TYPE COMMON-LISP:STRING)
                       (IS-RETRIGGER :INITARG :IS-RETRIGGER :DOCUMENTATION "*
* `true` if signature help was already showing when it was triggered.
*
* Retriggers occur when the signature help is already active and can be caused by actions such as
* typing a trigger character, a cursor move, or document content changes."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (ACTIVE-SIGNATURE-HELP? :INITARG :ACTIVE-SIGNATURE-HELP :DOCUMENTATION "*
* The currently active `SignatureHelp`.
*
* The `activeSignatureHelp` has its `SignatureHelp.activeSignature` field updated based on
* the user navigating through available signatures."
                        :TYPE SIGNATURE-HELP)))

(COMMON-LISP:DEFCLASS SIGNATURE-HELP COMMON-LISP:NIL
                      ((SIGNATURES :INITARG :SIGNATURES :DOCUMENTATION "*
* One or more signatures. If no signaures are availabe the signature help
* request should return `null`."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY SIGNATURE-INFORMATION))
                       (ACTIVE-SIGNATURE? :INITARG :ACTIVE-SIGNATURE :DOCUMENTATION "*
* The active signature. If omitted or the value lies outside the
* range of `signatures` the value defaults to zero or is ignore if
* the `SignatureHelp` as no signatures.
*
* Whenever possible implementors should make an active decision about
* the active signature and shouldn't rely on a default value.
*
* In future version of the protocol this property might become
* mandatory to better express this."
                        :TYPE COMMON-LISP:NUMBER)
                       (ACTIVE-PARAMETER? :INITARG :ACTIVE-PARAMETER :DOCUMENTATION "*
* The active parameter of the active signature. If omitted or the value
* lies outside the range of `signatures[activeSignature].parameters`
* defaults to 0 if the active signature has parameters. If
* the active signature has no parameters it is ignored.
* In future version of the protocol this property might become
* mandatory to better express the active parameter if the
* active signature does have any."
                        :TYPE COMMON-LISP:NUMBER)))

(COMMON-LISP:DEFCLASS SIGNATURE-INFORMATION COMMON-LISP:NIL
                      ((LABEL :INITARG :LABEL :DOCUMENTATION "*
* The label of this signature. Will be shown in
* the UI."
                        :TYPE COMMON-LISP:STRING)
                       (DOCUMENTATION? :INITARG :DOCUMENTATION :DOCUMENTATION "*
* The human-readable doc-comment of this signature. Will be shown
* in the UI but can be omitted."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:STRING MARKUP-CONTENT))
                       (PARAMETERS? :INITARG :PARAMETERS :DOCUMENTATION "*
* The parameters of this signature."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY PARAMETER-INFORMATION))))

(COMMON-LISP:DEFCLASS PARAMETER-INFORMATION COMMON-LISP:NIL
                      ((LABEL :INITARG :LABEL :DOCUMENTATION "*
* The label of this parameter information.
*
* Either a string or an inclusive start and exclusive end offsets within its containing
* signature label. (see SignatureInformation.label). The offsets are based on a UTF-16
* string representation as `Position` and `Range` does.
*
* *Note*: a label of type string should be a substring of its containing signature label.
* Its intended use case is to highlight the parameter label part in the `SignatureInformation.label`."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:STRING (LEM-LSP-MODE/TYPE:TUPLE COMMON-LISP:NUMBER COMMON-LISP:NUMBER)))
                       (DOCUMENTATION? :INITARG :DOCUMENTATION :DOCUMENTATION "*
* The human-readable doc-comment of this parameter. Will be shown
* in the UI but can be omitted."
                        :TYPE (COMMON-LISP:OR COMMON-LISP:STRING MARKUP-CONTENT))))

(COMMON-LISP:DEFCLASS DECLARATION-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether declaration supports dynamic registration. If this is set to `true`
* the client supports the new `DeclarationRegistrationOptions` return value
* for the corresponding server capability as well."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (LINK-SUPPORT? :INITARG :LINK-SUPPORT :DOCUMENTATION "*
* The client supports additional metadata in the form of declaration links."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS DECLARATION-OPTIONS (WORK-DONE-PROGRESS-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS DECLARATION-REGISTRATION-OPTIONS (DECLARATION-OPTIONS TEXT-DOCUMENT-REGISTRATION-OPTIONS STATIC-REGISTRATION-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS DECLARATION-PARAMS (TEXT-DOCUMENT-POSITION-PARAMS WORK-DONE-PROGRESS-PARAMS PARTIAL-RESULT-PARAMS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS DEFINITION-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether definition supports dynamic registration."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (LINK-SUPPORT? :INITARG :LINK-SUPPORT :DOCUMENTATION "*
* The client supports additional metadata in the form of definition links.
*
* @since 3.14.0"
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS DEFINITION-OPTIONS (WORK-DONE-PROGRESS-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS DEFINITION-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS DEFINITION-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS DEFINITION-PARAMS (TEXT-DOCUMENT-POSITION-PARAMS WORK-DONE-PROGRESS-PARAMS PARTIAL-RESULT-PARAMS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS TYPE-DEFINITION-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether implementation supports dynamic registration. If this is set to `true`
* the client supports the new `TypeDefinitionRegistrationOptions` return value
* for the corresponding server capability as well."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (LINK-SUPPORT? :INITARG :LINK-SUPPORT :DOCUMENTATION "*
* The client supports additional metadata in the form of definition links.
*
* @since 3.14.0"
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS TYPE-DEFINITION-OPTIONS (WORK-DONE-PROGRESS-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS TYPE-DEFINITION-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS TYPE-DEFINITION-OPTIONS STATIC-REGISTRATION-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS TYPE-DEFINITION-PARAMS (TEXT-DOCUMENT-POSITION-PARAMS WORK-DONE-PROGRESS-PARAMS PARTIAL-RESULT-PARAMS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS IMPLEMENTATION-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether implementation supports dynamic registration. If this is set to `true`
* the client supports the new `ImplementationRegistrationOptions` return value
* for the corresponding server capability as well."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (LINK-SUPPORT? :INITARG :LINK-SUPPORT :DOCUMENTATION "*
* The client supports additional metadata in the form of definition links.
*
* @since 3.14.0"
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS IMPLEMENTATION-OPTIONS (WORK-DONE-PROGRESS-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS IMPLEMENTATION-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS IMPLEMENTATION-OPTIONS STATIC-REGISTRATION-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS IMPLEMENTATION-PARAMS (TEXT-DOCUMENT-POSITION-PARAMS WORK-DONE-PROGRESS-PARAMS PARTIAL-RESULT-PARAMS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS REFERENCE-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether references supports dynamic registration."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS REFERENCE-OPTIONS (WORK-DONE-PROGRESS-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS REFERENCE-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS REFERENCE-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS REFERENCE-PARAMS (TEXT-DOCUMENT-POSITION-PARAMS WORK-DONE-PROGRESS-PARAMS PARTIAL-RESULT-PARAMS) ((CONTEXT :INITARG :CONTEXT :DOCUMENTATION "" :TYPE REFERENCE-CONTEXT)))

(COMMON-LISP:DEFCLASS REFERENCE-CONTEXT COMMON-LISP:NIL
                      ((INCLUDE-DECLARATION :INITARG :INCLUDE-DECLARATION :DOCUMENTATION "*
* Include the declaration of the current symbol."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS DOCUMENT-HIGHLIGHT-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether document highlight supports dynamic registration."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS DOCUMENT-HIGHLIGHT-OPTIONS (WORK-DONE-PROGRESS-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS DOCUMENT-HIGHLIGHT-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS DOCUMENT-HIGHLIGHT-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS DOCUMENT-HIGHLIGHT-PARAMS (TEXT-DOCUMENT-POSITION-PARAMS WORK-DONE-PROGRESS-PARAMS PARTIAL-RESULT-PARAMS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS DOCUMENT-HIGHLIGHT COMMON-LISP:NIL
                      ((RANGE :INITARG :RANGE :DOCUMENTATION "*
* The range this highlight applies to."
                        :TYPE RANGE)
                       (KIND? :INITARG :KIND :DOCUMENTATION "*
* The highlight kind, default is DocumentHighlightKind.Text."
                        :TYPE COMMON-LISP:NUMBER)))

(COMMON-LISP:PROGN (COMMON-LISP:DEFPARAMETER DOCUMENT-HIGHLIGHT-KIND.TEXT 1) (COMMON-LISP:DEFPARAMETER DOCUMENT-HIGHLIGHT-KIND.READ 2) (COMMON-LISP:DEFPARAMETER DOCUMENT-HIGHLIGHT-KIND.WRITE 3))

(COMMON-LISP:DEFCLASS DOCUMENT-SYMBOL-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether document symbol supports dynamic registration."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (SYMBOL-KIND? :INITARG :SYMBOL-KIND :DOCUMENTATION "*
* Specific capabilities for the `SymbolKind` in the `textDocument/documentSymbol` request."
                        :TYPE (LEM-LSP-MODE/TYPE:INTERFACE ("valueSet" :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY SYMBOL-KIND))))
                       (HIERARCHICAL-DOCUMENT-SYMBOL-SUPPORT? :INITARG :HIERARCHICAL-DOCUMENT-SYMBOL-SUPPORT :DOCUMENTATION "*
* The client supports hierarchical document symbols."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS DOCUMENT-SYMBOL-OPTIONS (WORK-DONE-PROGRESS-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS DOCUMENT-SYMBOL-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS DOCUMENT-SYMBOL-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS DOCUMENT-SYMBOL-PARAMS (WORK-DONE-PROGRESS-PARAMS PARTIAL-RESULT-PARAMS)
                      ((TEXT-DOCUMENT :INITARG :TEXT-DOCUMENT :DOCUMENTATION "*
* The text document."
                        :TYPE TEXT-DOCUMENT-IDENTIFIER)))

(COMMON-LISP:PROGN
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.FILE 1)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.MODULE 2)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.NAMESPACE 3)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.PACKAGE 4)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.CLASS 5)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.METHOD 6)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.PROPERTY 7)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.FIELD 8)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.CONSTRUCTOR 9)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.ENUM 10)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.INTERFACE 11)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.FUNCTION 12)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.VARIABLE 13)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.CONSTANT 14)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.STRING 15)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.NUMBER 16)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.BOOLEAN 17)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.ARRAY 18)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.OBJECT 19)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.KEY 20)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.NULL 21)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.ENUM-MEMBER 22)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.STRUCT 23)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.EVENT 24)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.OPERATOR 25)
 (COMMON-LISP:DEFPARAMETER SYMBOL-KIND.TYPE-PARAMETER 26))

(COMMON-LISP:DEFCLASS DOCUMENT-SYMBOL COMMON-LISP:NIL
                      ((NAME :INITARG :NAME :DOCUMENTATION "*
* The name of this symbol. Will be displayed in the user interface and therefore must not be
* an empty string or a string only consisting of white spaces."
                        :TYPE COMMON-LISP:STRING)
                       (DETAIL? :INITARG :DETAIL :DOCUMENTATION "*
* More detail for this symbol, e.g the signature of a function."
                        :TYPE COMMON-LISP:STRING)
                       (KIND :INITARG :KIND :DOCUMENTATION "*
* The kind of this symbol."
                        :TYPE SYMBOL-KIND)
                       (DEPRECATED? :INITARG :DEPRECATED :DOCUMENTATION "*
* Indicates if this symbol is deprecated."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (RANGE :INITARG :RANGE :DOCUMENTATION "*
* The range enclosing this symbol not including leading/trailing whitespace but everything else
* like comments. This information is typically used to determine if the clients cursor is
* inside the symbol to reveal in the symbol in the UI."
                        :TYPE RANGE)
                       (SELECTION-RANGE :INITARG :SELECTION-RANGE :DOCUMENTATION "*
* The range that should be selected and revealed when this symbol is being picked, e.g the name of a function.
* Must be contained by the `range`."
                        :TYPE RANGE)
                       (CHILDREN? :INITARG :CHILDREN :DOCUMENTATION "*
* Children of this symbol, e.g. properties of a class."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY DOCUMENT-SYMBOL))))

(COMMON-LISP:DEFCLASS SYMBOL-INFORMATION COMMON-LISP:NIL
                      ((NAME :INITARG :NAME :DOCUMENTATION "*
* The name of this symbol."
                        :TYPE COMMON-LISP:STRING)
                       (KIND :INITARG :KIND :DOCUMENTATION "*
* The kind of this symbol."
                        :TYPE SYMBOL-KIND)
                       (DEPRECATED? :INITARG :DEPRECATED :DOCUMENTATION "*
* Indicates if this symbol is deprecated."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (LOCATION :INITARG :LOCATION :DOCUMENTATION "*
* The location of this symbol. The location's range is used by a tool
* to reveal the location in the editor. If the symbol is selected in the
* tool the range's start information is used to position the cursor. So
* the range usually spans more then the actual symbol's name and does
* normally include things like visibility modifiers.
*
* The range doesn't have to denote a node range in the sense of a abstract
* syntax tree. It can therefore not be used to re-construct a hierarchy of
* the symbols."
                        :TYPE LOCATION)
                       (CONTAINER-NAME? :INITARG :CONTAINER-NAME :DOCUMENTATION "*
* The name of the symbol containing this symbol. This information is for
* user interface purposes (e.g. to render a qualifier in the user interface
* if necessary). It can't be used to re-infer a hierarchy for the document
* symbols."
                        :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:DEFCLASS CODE-ACTION-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether code action supports dynamic registration."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (CODE-ACTION-LITERAL-SUPPORT? :INITARG :CODE-ACTION-LITERAL-SUPPORT :DOCUMENTATION "*
* The client supports code action literals as a valid
* response of the `textDocument/codeAction` request.
*
* @since 3.8.0"
                        :TYPE (LEM-LSP-MODE/TYPE:INTERFACE ("codeActionKind" :TYPE (LEM-LSP-MODE/TYPE:INTERFACE ("valueSet" :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY CODE-ACTION-KIND))))))
                       (IS-PREFERRED-SUPPORT? :INITARG :IS-PREFERRED-SUPPORT :DOCUMENTATION "*
* Whether code action supports the `isPreferred` property.
* @since 3.15.0"
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS CODE-ACTION-OPTIONS (WORK-DONE-PROGRESS-OPTIONS)
                      ((CODE-ACTION-KINDS? :INITARG :CODE-ACTION-KINDS :DOCUMENTATION "*
* CodeActionKinds that this server may return.
*
* The list of kinds may be generic, such as `CodeActionKind.Refactor`, or the server
* may list out every specific kind they provide."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY CODE-ACTION-KIND))))

(COMMON-LISP:DEFCLASS CODE-ACTION-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS CODE-ACTION-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS CODE-ACTION-PARAMS (WORK-DONE-PROGRESS-PARAMS PARTIAL-RESULT-PARAMS)
                      ((TEXT-DOCUMENT :INITARG :TEXT-DOCUMENT :DOCUMENTATION "*
* The document in which the command was invoked."
                        :TYPE TEXT-DOCUMENT-IDENTIFIER)
                       (RANGE :INITARG :RANGE :DOCUMENTATION "*
* The range for which the command was invoked."
                        :TYPE RANGE)
                       (CONTEXT :INITARG :CONTEXT :DOCUMENTATION "*
* Context carrying additional information."
                        :TYPE CODE-ACTION-CONTEXT)))

COMMON-LISP:NIL

(COMMON-LISP:PROGN
 (COMMON-LISP:DEFPARAMETER CODE-ACTION-KIND.EMPTY "")
 (COMMON-LISP:DEFPARAMETER CODE-ACTION-KIND.QUICK-FIX "quickfix")
 (COMMON-LISP:DEFPARAMETER CODE-ACTION-KIND.REFACTOR "refactor")
 (COMMON-LISP:DEFPARAMETER CODE-ACTION-KIND.REFACTOR-EXTRACT "refactor.extract")
 (COMMON-LISP:DEFPARAMETER CODE-ACTION-KIND.REFACTOR-INLINE "refactor.inline")
 (COMMON-LISP:DEFPARAMETER CODE-ACTION-KIND.REFACTOR-REWRITE "refactor.rewrite")
 (COMMON-LISP:DEFPARAMETER CODE-ACTION-KIND.SOURCE "source")
 (COMMON-LISP:DEFPARAMETER CODE-ACTION-KIND.SOURCE-ORGANIZE-IMPORTS "source.organizeImports"))

(COMMON-LISP:DEFCLASS CODE-ACTION-CONTEXT COMMON-LISP:NIL
                      ((DIAGNOSTICS :INITARG :DIAGNOSTICS :DOCUMENTATION "*
* An array of diagnostics known on the client side overlapping the range provided to the
* `textDocument/codeAction` request. They are provided so that the server knows which
* errors are currently presented to the user for the given range. There is no guarantee
* that these accurately reflect the error state of the resource. The primary parameter
* to compute code actions is the provided range."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY DIAGNOSTIC))
                       (ONLY? :INITARG :ONLY :DOCUMENTATION "*
* Requested kind of actions to return.
*
* Actions not of this kind are filtered out by the client before being shown. So servers
* can omit computing them."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY CODE-ACTION-KIND))))

(COMMON-LISP:DEFCLASS CODE-ACTION COMMON-LISP:NIL
                      ((TITLE :INITARG :TITLE :DOCUMENTATION "*
* A short, human-readable, title for this code action."
                        :TYPE COMMON-LISP:STRING)
                       (KIND? :INITARG :KIND :DOCUMENTATION "*
* The kind of the code action.
*
* Used to filter code actions."
                        :TYPE CODE-ACTION-KIND)
                       (DIAGNOSTICS? :INITARG :DIAGNOSTICS :DOCUMENTATION "*
* The diagnostics that this code action resolves."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY DIAGNOSTIC))
                       (IS-PREFERRED? :INITARG :IS-PREFERRED :DOCUMENTATION "*
* Marks this as a preferred action. Preferred actions are used by the `auto fix` command and can be targeted
* by keybindings.
*
* A quick fix should be marked preferred if it properly addresses the underlying error.
* A refactoring should be marked preferred if it is the most reasonable choice of actions to take.
*
* @since 3.15.0"
                        :TYPE COMMON-LISP:BOOLEAN)
                       (EDIT? :INITARG :EDIT :DOCUMENTATION "*
* The workspace edit this code action performs."
                        :TYPE WORKSPACE-EDIT)
                       (COMMAND? :INITARG :COMMAND :DOCUMENTATION "*
* A command this code action executes. If a code action
* provides an edit and a command, first the edit is
* executed and then the command."
                        :TYPE COMMAND)))

(COMMON-LISP:DEFCLASS CODE-LENS-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether code lens supports dynamic registration."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS CODE-LENS-OPTIONS (WORK-DONE-PROGRESS-OPTIONS)
                      ((RESOLVE-PROVIDER? :INITARG :RESOLVE-PROVIDER :DOCUMENTATION "*
* Code lens has a resolve provider as well."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS CODE-LENS-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS CODE-LENS-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS CODE-LENS-PARAMS (WORK-DONE-PROGRESS-PARAMS PARTIAL-RESULT-PARAMS)
                      ((TEXT-DOCUMENT :INITARG :TEXT-DOCUMENT :DOCUMENTATION "*
* The document to request code lens for."
                        :TYPE TEXT-DOCUMENT-IDENTIFIER)))

(COMMON-LISP:DEFCLASS CODE-LENS COMMON-LISP:NIL
                      ((RANGE :INITARG :RANGE :DOCUMENTATION "*
* The range in which this code lens is valid. Should only span a single line."
                        :TYPE RANGE)
                       (COMMAND? :INITARG :COMMAND :DOCUMENTATION "*
* The command this code lens represents."
                        :TYPE COMMAND)
                       (DATA? :INITARG :DATA :DOCUMENTATION "*
* A data entry field that is preserved on a code lens item between
* a code lens and a code lens resolve request."
                        :TYPE COMMON-LISP:T)))

(COMMON-LISP:DEFCLASS DOCUMENT-LINK-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether document link supports dynamic registration."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (TOOLTIP-SUPPORT? :INITARG :TOOLTIP-SUPPORT :DOCUMENTATION "*
* Whether the client supports the `tooltip` property on `DocumentLink`.
*
* @since 3.15.0"
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS DOCUMENT-LINK-OPTIONS (WORK-DONE-PROGRESS-OPTIONS)
                      ((RESOLVE-PROVIDER? :INITARG :RESOLVE-PROVIDER :DOCUMENTATION "*
* Document links have a resolve provider as well."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS DOCUMENT-LINK-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS DOCUMENT-LINK-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS DOCUMENT-LINK-PARAMS (WORK-DONE-PROGRESS-PARAMS PARTIAL-RESULT-PARAMS)
                      ((TEXT-DOCUMENT :INITARG :TEXT-DOCUMENT :DOCUMENTATION "*
* The document to provide document links for."
                        :TYPE TEXT-DOCUMENT-IDENTIFIER)))

(COMMON-LISP:DEFCLASS DOCUMENT-LINK COMMON-LISP:NIL
                      ((RANGE :INITARG :RANGE :DOCUMENTATION "*
* The range this link applies to."
                        :TYPE RANGE)
                       (TARGET? :INITARG :TARGET :DOCUMENTATION "*
* The uri this link points to. If missing a resolve request is sent later."
                        :TYPE DOCUMENT-URI)
                       (TOOLTIP? :INITARG :TOOLTIP :DOCUMENTATION "*
* The tooltip text when you hover over this link.
*
* If a tooltip is provided, is will be displayed in a string that includes instructions on how to
* trigger the link, such as `{0} (ctrl + click)`. The specific instructions vary depending on OS,
* user settings, and localization.
*
* @since 3.15.0"
                        :TYPE COMMON-LISP:STRING)
                       (DATA? :INITARG :DATA :DOCUMENTATION "*
* A data entry field that is preserved on a document link between a
* DocumentLinkRequest and a DocumentLinkResolveRequest."
                        :TYPE COMMON-LISP:T)))

(COMMON-LISP:DEFCLASS DOCUMENT-COLOR-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether document color supports dynamic registration."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS DOCUMENT-COLOR-OPTIONS (WORK-DONE-PROGRESS-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS DOCUMENT-COLOR-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS STATIC-REGISTRATION-OPTIONS DOCUMENT-COLOR-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS DOCUMENT-COLOR-PARAMS (WORK-DONE-PROGRESS-PARAMS PARTIAL-RESULT-PARAMS)
                      ((TEXT-DOCUMENT :INITARG :TEXT-DOCUMENT :DOCUMENTATION "*
* The text document."
                        :TYPE TEXT-DOCUMENT-IDENTIFIER)))

(COMMON-LISP:DEFCLASS COLOR-INFORMATION COMMON-LISP:NIL
                      ((RANGE :INITARG :RANGE :DOCUMENTATION "*
* The range in the document where this color appears."
                        :TYPE RANGE)
                       (COLOR :INITARG :COLOR :DOCUMENTATION "*
* The actual color value for this color range."
                        :TYPE COLOR)))

(COMMON-LISP:DEFCLASS COLOR COMMON-LISP:NIL
                      ((RED :INITARG :RED :DOCUMENTATION "*
* The red component of this color in the range [0-1]."
                        :TYPE COMMON-LISP:NUMBER)
                       (GREEN :INITARG :GREEN :DOCUMENTATION "*
* The green component of this color in the range [0-1]."
                        :TYPE COMMON-LISP:NUMBER)
                       (BLUE :INITARG :BLUE :DOCUMENTATION "*
* The blue component of this color in the range [0-1]."
                        :TYPE COMMON-LISP:NUMBER)
                       (ALPHA :INITARG :ALPHA :DOCUMENTATION "*
* The alpha component of this color in the range [0-1]."
                        :TYPE COMMON-LISP:NUMBER)))

(COMMON-LISP:DEFCLASS COLOR-PRESENTATION-PARAMS (WORK-DONE-PROGRESS-PARAMS PARTIAL-RESULT-PARAMS)
                      ((TEXT-DOCUMENT :INITARG :TEXT-DOCUMENT :DOCUMENTATION "*
* The text document."
                        :TYPE TEXT-DOCUMENT-IDENTIFIER)
                       (COLOR :INITARG :COLOR :DOCUMENTATION "*
* The color information to request presentations for."
                        :TYPE COLOR)
                       (RANGE :INITARG :RANGE :DOCUMENTATION "*
* The range where the color would be inserted. Serves as a context."
                        :TYPE RANGE)))

(COMMON-LISP:DEFCLASS COLOR-PRESENTATION COMMON-LISP:NIL
                      ((LABEL :INITARG :LABEL :DOCUMENTATION "*
* The label of this color presentation. It will be shown on the color
* picker header. By default this is also the text that is inserted when selecting
* this color presentation."
                        :TYPE COMMON-LISP:STRING)
                       (TEXT-EDIT? :INITARG :TEXT-EDIT :DOCUMENTATION "*
* An [edit](#TextEdit) which is applied to a document when selecting
* this presentation for the color.  When `falsy` the [label](#ColorPresentation.label)
* is used."
                        :TYPE TEXT-EDIT)
                       (ADDITIONAL-TEXT-EDITS? :INITARG :ADDITIONAL-TEXT-EDITS :DOCUMENTATION "*
* An optional array of additional [text edits](#TextEdit) that are applied when
* selecting this color presentation. Edits must not overlap with the main [edit](#ColorPresentation.textEdit) nor with themselves."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY TEXT-EDIT))))

(COMMON-LISP:DEFCLASS DOCUMENT-FORMATTING-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether formatting supports dynamic registration."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS DOCUMENT-FORMATTING-OPTIONS (WORK-DONE-PROGRESS-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS DOCUMENT-FORMATTING-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS DOCUMENT-FORMATTING-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS DOCUMENT-FORMATTING-PARAMS (WORK-DONE-PROGRESS-PARAMS)
                      ((TEXT-DOCUMENT :INITARG :TEXT-DOCUMENT :DOCUMENTATION "*
* The document to format."
                        :TYPE TEXT-DOCUMENT-IDENTIFIER)
                       (OPTIONS :INITARG :OPTIONS :DOCUMENTATION "*
* The format options."
                        :TYPE FORMATTING-OPTIONS)))

(COMMON-LISP:DEFCLASS FORMATTING-OPTIONS COMMON-LISP:NIL
                      ((TAB-SIZE :INITARG :TAB-SIZE :DOCUMENTATION "*
* Size of a tab in spaces."
                        :TYPE COMMON-LISP:NUMBER)
                       (INSERT-SPACES :INITARG :INSERT-SPACES :DOCUMENTATION "*
* Prefer spaces over tabs."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (TRIM-TRAILING-WHITESPACE? :INITARG :TRIM-TRAILING-WHITESPACE :DOCUMENTATION "*
* Trim trailing whitespace on a line.
*
* @since 3.15.0"
                        :TYPE COMMON-LISP:BOOLEAN)
                       (INSERT-FINAL-NEWLINE? :INITARG :INSERT-FINAL-NEWLINE :DOCUMENTATION "*
* Insert a newline character at the end of the file if one does not exist.
*
* @since 3.15.0"
                        :TYPE COMMON-LISP:BOOLEAN)
                       (TRIM-FINAL-NEWLINES? :INITARG :TRIM-FINAL-NEWLINES :DOCUMENTATION "*
* Trim all newlines after the final newline at the end of the file.
*
* @since 3.15.0"
                        :TYPE COMMON-LISP:BOOLEAN)
                       (KEY :INITARG :KEY :DOCUMENTATION "*
* Signature for further properties."
                        :TYPE (LEM-LSP-MODE/TYPE:OBJECT COMMON-LISP:STRING (COMMON-LISP:OR COMMON-LISP:BOOLEAN COMMON-LISP:NUMBER COMMON-LISP:STRING)))))

(COMMON-LISP:DEFCLASS DOCUMENT-RANGE-FORMATTING-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether formatting supports dynamic registration."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS DOCUMENT-RANGE-FORMATTING-OPTIONS (WORK-DONE-PROGRESS-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS DOCUMENT-RANGE-FORMATTING-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS DOCUMENT-RANGE-FORMATTING-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS DOCUMENT-RANGE-FORMATTING-PARAMS (WORK-DONE-PROGRESS-PARAMS)
                      ((TEXT-DOCUMENT :INITARG :TEXT-DOCUMENT :DOCUMENTATION "*
* The document to format."
                        :TYPE TEXT-DOCUMENT-IDENTIFIER)
                       (RANGE :INITARG :RANGE :DOCUMENTATION "*
* The range to format"
                        :TYPE RANGE)
                       (OPTIONS :INITARG :OPTIONS :DOCUMENTATION "*
* The format options"
                        :TYPE FORMATTING-OPTIONS)))

(COMMON-LISP:DEFCLASS DOCUMENT-ON-TYPE-FORMATTING-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether on type formatting supports dynamic registration."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS DOCUMENT-ON-TYPE-FORMATTING-OPTIONS COMMON-LISP:NIL
                      ((FIRST-TRIGGER-CHARACTER :INITARG :FIRST-TRIGGER-CHARACTER :DOCUMENTATION "*
* A character on which formatting should be triggered, like `}`."
                        :TYPE COMMON-LISP:STRING)
                       (MORE-TRIGGER-CHARACTER? :INITARG :MORE-TRIGGER-CHARACTER :DOCUMENTATION "*
* More trigger characters."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY COMMON-LISP:STRING))))

(COMMON-LISP:DEFCLASS DOCUMENT-ON-TYPE-FORMATTING-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS DOCUMENT-ON-TYPE-FORMATTING-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS DOCUMENT-ON-TYPE-FORMATTING-PARAMS (TEXT-DOCUMENT-POSITION-PARAMS)
                      ((CH :INITARG :CH :DOCUMENTATION "*
* The character that has been typed."
                        :TYPE COMMON-LISP:STRING)
                       (OPTIONS :INITARG :OPTIONS :DOCUMENTATION "*
* The format options."
                        :TYPE FORMATTING-OPTIONS)))

(COMMON-LISP:DEFCLASS RENAME-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether rename supports dynamic registration."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (PREPARE-SUPPORT? :INITARG :PREPARE-SUPPORT :DOCUMENTATION "*
* Client supports testing for validity of rename operations
* before execution.
*
* @since version 3.12.0"
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS RENAME-OPTIONS (WORK-DONE-PROGRESS-OPTIONS)
                      ((PREPARE-PROVIDER? :INITARG :PREPARE-PROVIDER :DOCUMENTATION "*
* Renames should be checked and tested before being executed."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS RENAME-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS RENAME-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS RENAME-PARAMS (TEXT-DOCUMENT-POSITION-PARAMS WORK-DONE-PROGRESS-PARAMS)
                      ((NEW-NAME :INITARG :NEW-NAME :DOCUMENTATION "*
* The new name of the symbol. If the given name is not valid the
* request must return a [ResponseError](#ResponseError) with an
* appropriate message set."
                        :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:DEFCLASS PREPARE-RENAME-PARAMS (TEXT-DOCUMENT-POSITION-PARAMS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS FOLDING-RANGE-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether implementation supports dynamic registration for folding range providers. If this is set to `true`
* the client supports the new `FoldingRangeRegistrationOptions` return value for the corresponding server
* capability as well."
                        :TYPE COMMON-LISP:BOOLEAN)
                       (RANGE-LIMIT? :INITARG :RANGE-LIMIT :DOCUMENTATION "*
* The maximum number of folding ranges that the client prefers to receive per document. The value serves as a
* hint, servers are free to follow the limit."
                        :TYPE COMMON-LISP:NUMBER)
                       (LINE-FOLDING-ONLY? :INITARG :LINE-FOLDING-ONLY :DOCUMENTATION "*
* If set, the client signals that it only supports folding complete lines. If set, client will
* ignore specified `startCharacter` and `endCharacter` properties in a FoldingRange."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS FOLDING-RANGE-OPTIONS (WORK-DONE-PROGRESS-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS FOLDING-RANGE-REGISTRATION-OPTIONS (TEXT-DOCUMENT-REGISTRATION-OPTIONS FOLDING-RANGE-OPTIONS STATIC-REGISTRATION-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS FOLDING-RANGE-PARAMS (WORK-DONE-PROGRESS-PARAMS PARTIAL-RESULT-PARAMS)
                      ((TEXT-DOCUMENT :INITARG :TEXT-DOCUMENT :DOCUMENTATION "*
* The text document."
                        :TYPE TEXT-DOCUMENT-IDENTIFIER)))

COMMON-LISP:NIL

(COMMON-LISP:DEFCLASS FOLDING-RANGE COMMON-LISP:NIL
                      ((START-LINE :INITARG :START-LINE :DOCUMENTATION "*
* The zero-based line number from where the folded range starts."
                        :TYPE COMMON-LISP:NUMBER)
                       (START-CHARACTER? :INITARG :START-CHARACTER :DOCUMENTATION "*
* The zero-based character offset from where the folded range starts. If not defined, defaults to the length of the start line."
                        :TYPE COMMON-LISP:NUMBER)
                       (END-LINE :INITARG :END-LINE :DOCUMENTATION "*
* The zero-based line number where the folded range ends."
                        :TYPE COMMON-LISP:NUMBER)
                       (END-CHARACTER? :INITARG :END-CHARACTER :DOCUMENTATION "*
* The zero-based character offset before the folded range ends. If not defined, defaults to the length of the end line."
                        :TYPE COMMON-LISP:NUMBER)
                       (KIND? :INITARG :KIND :DOCUMENTATION "*
* Describes the kind of the folding range such as `comment` or `region`. The kind
* is used to categorize folding ranges and used by commands like 'Fold all comments'. See
* [FoldingRangeKind](#FoldingRangeKind) for an enumeration of standardized kinds."
                        :TYPE COMMON-LISP:STRING)))

(COMMON-LISP:DEFCLASS SELECTION-RANGE-CLIENT-CAPABILITIES COMMON-LISP:NIL
                      ((DYNAMIC-REGISTRATION? :INITARG :DYNAMIC-REGISTRATION :DOCUMENTATION "*
* Whether implementation supports dynamic registration for selection range providers. If this is set to `true`
* the client supports the new `SelectionRangeRegistrationOptions` return value for the corresponding server
* capability as well."
                        :TYPE COMMON-LISP:BOOLEAN)))

(COMMON-LISP:DEFCLASS SELECTION-RANGE-OPTIONS (WORK-DONE-PROGRESS-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS SELECTION-RANGE-REGISTRATION-OPTIONS (SELECTION-RANGE-OPTIONS TEXT-DOCUMENT-REGISTRATION-OPTIONS STATIC-REGISTRATION-OPTIONS) COMMON-LISP:NIL)

(COMMON-LISP:DEFCLASS SELECTION-RANGE-PARAMS (WORK-DONE-PROGRESS-PARAMS PARTIAL-RESULT-PARAMS)
                      ((TEXT-DOCUMENT :INITARG :TEXT-DOCUMENT :DOCUMENTATION "*
* The text document."
                        :TYPE TEXT-DOCUMENT-IDENTIFIER)
                       (POSITIONS :INITARG :POSITIONS :DOCUMENTATION "*
* The positions inside the text document."
                        :TYPE (LEM-LSP-MODE/TYPE:LSP-ARRAY POSITION))))

(COMMON-LISP:DEFCLASS SELECTION-RANGE COMMON-LISP:NIL
                      ((RANGE :INITARG :RANGE :DOCUMENTATION "*
* The [range](#Range) of this selection range."
                        :TYPE RANGE)
                       (PARENT? :INITARG :PARENT :DOCUMENTATION "*
* The parent selection range containing this range. Therefore `parent.range` must contain `this.range`."
                        :TYPE SELECTION-RANGE)))
